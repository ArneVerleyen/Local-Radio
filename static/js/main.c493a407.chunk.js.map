{"version":3,"sources":["app/routes/index.js","app/config/index.js","app/services/api.service.js","app/services/auth.service.js","app/static/logos/Logo_LOCAL_wit.png","app/static/icons/bars-solid-white.svg","app/static/icons/close_white.svg","app/components/Partials/Header.js","app/components/Partials/Footer.js","app/static/images/IMG-3657.png","app/components/Partials/HeaderImage.js","app/static/icons/pin.svg","app/components/Searchbar/LocationSearchbar.js","app/static/icons/like_btn.svg","app/components/Songs/SongsList.js","app/components/Songs/UploadSong.js","app/components/Login/Login.js","app/components/Login/Register.js","app/components/Music/MusicSearchbar.js","app/components/Music/LibrarySearchbar.js","app/components/Music/RadioSearchBar.js","app/components/Albums/AlbumList.js","app/components/Albums/AlbumDetail.js","app/components/Albums/AlbumUploadWithRel.js","app/components/Playlists/PlaylistList.js","app/components/Playlists/MakePlaylist.js","app/components/Playlists/PlaylistDetail.js","app/components/User/UserAlbumList.js","app/components/User/UserPlaylistList.js","app/components/User/UserSongList.js","app/components/Broadcast/FollowedUsers.js","app/components/Broadcast/ArtistAlbums.js","app/components/Broadcast/ArtistPlaylists.js","app/components/Broadcast/ArtistsSongs.js","app/pages/HomePage.js","app/pages/SearchSongsPage.js","app/pages/ContactPage.js","app/pages/LoginPage.js","app/pages/RegisterPage.js","app/static/icons/upload_white.svg","app/static/icons/plus_white.svg","app/pages/Artist/AtristPage.js","app/pages/Artist/UploadSongPage.js","app/pages/Artist/UploadAlbumPage.js","app/pages/Artist/MakePlaylistPage.js","app/pages/Album/AlbumsPage.js","app/pages/Album/AlbumDetailPage.js","app/pages/Playlist/PlaylistsPage.js","app/pages/Playlist/PlaylistDetailPage.js","app/pages/User/UserAlbumPage.js","app/pages/User/UserPlaylistPage.js","app/pages/User/UserSongPage.js","app/pages/Broadcast/FollowedPage.js","app/pages/Broadcast/ArtistAlbumPage.js","app/pages/Broadcast/ArtistPlaylistPage.js","app/pages/Broadcast/ArtistSongPage.js","app/layout/PageLayout.js","app/utilities/RouteLayout.js","app/App.js","reportWebVitals.js","index.js"],"names":["HOME","LOGIN","REGISTER","CONTACT","ARTISTS","SONGS","ALBUMS","ALBUMS_DETAIL","PLAYLISTS","PLAYLISTS_DETAIL","UPLOAD_SONG","MAKE_PLAYLIST","UPLOAD_ALBUM","USER_ALBUM","USER_PLAYLISTS","USER_SONGS","BROADCAST_FOLLOWED_USERS","BROADCAST_SONGS","BROADCAST_ALBUMS","BROADCAST_PLAYLISTS","apiConfig","process","ApiContext","createContext","useApi","useContext","ApiProvider","children","BASE_URL","findAllSongs","query","a","url","fetch","response","status","json","findAllSongsNotPaged","findSong","id","storeMediaSong","token","songForm","options","method","headers","body","storeMediaPicture","pictureForm","storeSong","JSON","stringify","findAllAlbumsNotPaged","findAllAlbums","storeAlbum","findAlbum","findAllPlaylists","findPlaylist","console","log","storePlaylist","findUserLibraries","indexOf","queryParams","storeUserLibrary","userLib","findUserLibrary","Object","keys","map","key","encodeURIComponent","join","findUser","Provider","value","AuthContext","useAuth","AuthProvider","useState","parse","localStorage","getItem","Error","decoded","jwt","exp","Date","now","error","currentUser","setCurrentUser","signIn","username","password","mode","user","setItem","signup","authUser","logout","Header","open","setOpen","history","useHistory","handleLogout","push","Routes","className","to","src","logo","alt","onClick","hamburger","close","Footer","HeaderImage","image","LocationSearchbar","lat","long","locate","setGeolocation","adress","locationForm","setLocationForm","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","locationLogo","onSubmit","ev","preventDefault","nodeOpenGeocoder","geocode","end","err","res","placeholder","name","type","onChange","target","SongList","amount","onReadmore","userID","songs","setSongs","setUserLib","songsPage","setSongsPage","user_id","initFetch","useCallback","fetchSongs","data","fetchLib","useEffect","checkLiked","song","likes","acf","includes","unLikeSong","index","splice","postObj","fields","likeSong","handleLoadMore","number","newSongs","concat","checkFollowed","artists","Array","isArray","ID","follow","followed","parseInt","isNaN","unFollow","picture","title","rendered","replace","display_name","controls","audio","source_url","like","UploadSong","description","artist","metaData","setmetaData","handleInputChange","uploadFiles","document","getElementById","coverInput","FormData","append","files","pictureData","audioInput","audioData","handleSubmit","accept","rows","Login","setUsername","setPassword","wrongCreds","setWrongCreds","Register","email","setBody","role","setRole","libraryBody","user_display_name","multiple","MusicSearchbar","LibrarySearchbar","RadioSearchBar","useParams","AlbumList","onReadMore","albums","setAlbums","albumPage","setAlbumPage","fetchAlbums","newAlbums","checkLikedAlbum","album","unLikeAlbum","likeAlbum","parsedId","cover","albumId","handleReadMore","AlbumDetail","setAlbum","nummersAlbum","setNummers","nummers","numArray","nummer","fetchAlbum","AlbumUploadWithRel","coverUrl","setCoverUrl","file","albumForm","audioPath","filename","filenameSplice","filenameDone","artist_albums","userLibObj","PlaylistList","playlists","setPlaylists","playlistsPage","setPlaylistsPage","fetchPlaylists","newPlaylists","checkLikedPlaylist","playlist","unLikePlaylist","likePlaylist","playlistArray","playlistId","MakePlaylist","setPlaylist","albumIds","albumData","songIds","artist_songs","songData","checkAddedSongs","checkAddedAlbums","reqPlaylist","artist_playlists","playlistAdd","addSong","playlistRemove","removeSong","addAlbum","removeAlbum","PlaylistDetail","albumAr","songAr","albumsArray","songsArray","fetchPlaylist","handleEventReadMore","UserAlbumList","fetchAlbumLibrary","undefined","UserPlaylistList","playlistsArray","fetchPlaylistLibrary","UserSongList","fetchSongLibrary","checkLikedSong","setArtists","artistArray","artistId","ArtistAlbums","fetchArtistAlbums","ArtistPlaylists","playlistIds","playlistData","fetchArtistPlaylists","ArtistsSongs","fetchArtistSongs","HomePage","SearchSongsPage","ContactPage","LoginPage","RegisterPage","ArtistPage","upload","plus","UploadSongPage","UploadAlbumPage","MakePlaylistPage","AlbumsPage","AlbumDetailPage","PlaylistsPage","UserAlbumPage","UserPlaylistPage","UserSongPage","FollowedPage","FollowedUsers","userId","ArtistAlbumPage","ArtistPlaylistPage","ArtistSongPage","PageLayout","RouteLayout","component","layout","rest","render","routeProps","React","createElement","renderMergedProps","App","basename","exact","path","PlaylistDetailPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c493a407.chunk.js","sourcesContent":["export const HOME = '/';\n// Auth routes\nexport const LOGIN = '/login'\nexport const REGISTER = '/register';\n\nexport const ABOUT = '/about';\nexport const CONTACT = '/contact';\n\nexport const ARTISTS = '/artists';\n\nexport const SONGS = '/songs';\nexport const SONGS_DETAIL = '/songs/:id';\n\nexport const ALBUMS = '/albums';\nexport const ALBUMS_DETAIL = '/albums/:id';\n\nexport const PLAYLISTS = '/playlists';\nexport const PLAYLISTS_DETAIL = '/playlists/:id';\n\nexport const EDIT_ARTIST_PROFILE = '/artistprofile/edit';\n\n// Create routes\nexport const UPLOAD_SONG = '/songs/upload';\nexport const MAKE_PLAYLIST = '/create/playlist';\nexport const MAKE_RADIO = '/radio/broadcast';\nexport const UPLOAD_ALBUM   = '/create/albums';\n\n// Library routes\nexport const USER_ALBUM   = '/user/albums';\nexport const USER_PLAYLISTS   = '/user/playlists';\nexport const USER_SONGS   = '/user/songs';\n\n// Broadcast routes\nexport const BROADCAST_FOLLOWED_USERS = '/broadcast';\nexport const BROADCAST_SONGS = '/broadcast/songs/:id';\nexport const BROADCAST_ALBUMS = '/broadcast/albums/:id';\nexport const BROADCAST_PLAYLISTS = '/broadcast/playlists/:id';\n\n\n\n\n","export const apiConfig = {\n    baseURL: process.env.REACT_APP_API_URL,\n};\n\n","import React, {useContext, createContext} from 'react';\nimport {apiConfig} from '../config';\n\nconst ApiContext = createContext();\nconst useApi = () => useContext(ApiContext);\n\nconst ApiProvider = ({children}) => {\n\n    const BASE_URL = `${apiConfig.baseURL}`;\n\n    /*\n     * SONGS\n     */\n\n    const findAllSongs = async (query) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/nummers`;\n        if (query !== 0) {\n          url = url + `/?page=${query}`;\n        }\n        const response = await fetch(url);\n        if(response.status === 200) {\n            return response.json();\n        } else {\n            return 'no more posts';\n        };  \n    };\n\n    const findAllSongsNotPaged = async (query) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/nummers`;\n\n        const response = await fetch(url); \n        return response.json();\n    }\n\n    const findSong = async (id) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/nummers/${id}`;\n        const response = await fetch(url);\n        return response.json();\n    } \n\n    const storeMediaSong = async (token, songForm) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            //'Accept': 'application/json',\n            //'Content-Type': 'audio/mpeg',\n            'Authorization': 'Bearer'+ token\n          },\n          body: songForm\n        }\n        \n        let url = `${BASE_URL}/wp-json/wp/v2/media`;\n        const response = await fetch(url, options);\n        \n        return response.json();\n    }\n\n\n    const storeMediaPicture = async (token, pictureForm) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            //'Accept': 'application/json',\n            //'Content-Type': 'audio/mpeg',\n            'Authorization': 'Bearer'+ token\n          },\n          body: pictureForm\n        };\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/media`;\n        const response = await fetch(url, options);\n        \n        return response.json();\n    }\n\n    const storeSong = async (body, token) => {\n        const options = {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer'+ token\n          },\n          body: JSON.stringify(body)\n        };\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/nummers`;\n        const response = await fetch(url, options);\n        return response.json();\n    }\n\n    /*\n     * ALBUMS\n     */\n    const findAllAlbumsNotPaged = async (query) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/album`;\n\n        const response = await fetch(url);\n        return response.json();\n    };\n\n    const findAllAlbums = async (query) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/album`;\n        if (query !== 0) {\n            url = url + `/?page=${query}`;\n          }\n        const response = await fetch(url);\n\n        if(response.status === 200) {\n            return response.json();\n        } else {\n            return 'no more posts';\n        };\n    };\n\n    const storeAlbum = async (body, token) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer'+ token\n          },\n          body: JSON.stringify(body)\n        };\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/album`;\n        const response = await fetch(url, options);\n        return response.json();\n    };\n\n    const findAlbum = async (id) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/album/${id}`;\n        const response = await fetch(url);\n        return response.json();\n    }; \n\n\n\n    /*\n     * PLAYLISTS\n     */\n\n    const findAllPlaylists = async (query) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/playlists`;\n        if (query !== 0) {\n            url = url + `/?page=${query}`;\n        }\n        const response = await fetch(url);\n        if(response.status === 200) {\n            return response.json();\n        } else {\n            return 'no more posts';\n        };\n    };\n\n    const findPlaylist = async (id) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/playlists/${id}`;\n        const response = await fetch(url);\n        console.log(response)\n        if (response.status === 200) {\n            return response.json();\n        };\n    };\n\n    const storePlaylist = async (body, token) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer'+ token\n          },\n          body: JSON.stringify(body)\n        };\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/playlists`;\n        const response = await fetch(url, options);\n        return response.json();\n    };\n\n\n    /*\n     * USERLIBRARY\n     */\n\n     // ?=include\n\n    const findUserLibraries = async (query = null) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/user_library`;\n        if (query !== null) {\n          url += (url.indexOf('?') === -1 ? '?' : '&') + queryParams(query);\n        }\n\n        const response = await fetch(url);\n        if(response.status === 200) {\n            return response.json();\n        } else {\n            return 'no more posts';\n        };\n    };\n    \n    const storeUserLibrary = async (userLib, token, id) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer'+ token\n          },\n          body: JSON.stringify(userLib)\n        };\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/user_library/${id}`;\n        const response = await fetch(url, options);\n        return response.json();\n    };\n\n    const findUserLibrary = async (id) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/user_library/?user_id=${id}`;\n        const response = await fetch(url);\n        return response.json();\n    };\n\n    const queryParams = (options) => {\n        return Object.keys(options)\n          .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(options[key])).join('&');\n    };\n\n    const findUser = async (id) => {\n        let url = `${BASE_URL}/wp-json/wp/v2/users/${id}`;\n        const response = await fetch(url);\n        return response.json();\n    };\n\n    return (\n        <ApiContext.Provider value={{\n            findAllSongs,\n            findAllAlbums,\n            findAllPlaylists,\n            findUserLibraries,\n            storeSong,\n            storeMediaSong,\n            storeMediaPicture,\n            storeAlbum,\n            findAlbum,\n            findSong,\n            storeUserLibrary,\n            findUserLibrary,\n            findPlaylist,\n            storePlaylist,\n            findAllAlbumsNotPaged,\n            findAllSongsNotPaged,\n            findUser\n            }}>\n            {children}\n        </ApiContext.Provider>\n    )\n\n};\n\nexport  {\n    ApiProvider,\n    ApiContext,\n    useApi\n};\n","import React, {createContext, useContext, useState} from 'react';\nimport { apiConfig } from '../config';\nimport * as jwt from 'jsonwebtoken';\n\n\nconst AuthContext = createContext();\nconst useAuth = () => useContext(AuthContext);\n\nconst AuthProvider = ({children}) => {\n\n    const BASE_URL = `${apiConfig.baseURL}`;\n\n    const verifyUserFromLocalStorage = () => {\n        if (JSON.parse(localStorage.getItem('mern:authUser'))) {\n          try {\n            const token = JSON.parse(localStorage.getItem('mern:authUser')).token;\n            if (!token) {\n              throw new Error('Token is not present on localstorage!');\n            }\n            const decoded = jwt.verify(token, 'nmd');\n            if (!decoded) {\n              throw new Error('Couldn\\'t decode the token!');\n            }\n    \n            if (decoded.exp > Date.now()) {\n              throw new Error('Token is expired!')\n            }\n            return JSON.parse(localStorage.getItem('mern:authUser'));\n          } catch (error) {\n            return null;\n          }\n        }\n        return null;\n    }\n\n    const [currentUser, setCurrentUser] = useState(verifyUserFromLocalStorage);\n\n    const signIn = async (username, password) => {\n        const url =`${apiConfig.baseURL}/wp-json/jwt-auth/v1/token`;\n\n        const body = {\n            username,\n            password\n        };\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Accept':'*'\n        };\n\n        const options = {\n            method: 'POST',\n            mode:'cors',\n            headers: headers,\n            body: JSON.stringify(body),\n        };\n\n        const response = await fetch(`${url}`, options);\n        const user = await response.json();\n    \n        if (response.status === 200) {\n            localStorage.setItem('authUser', JSON.stringify(user));\n            setCurrentUser(user);\n        } else if (response.status === 403) {\n            return 'wrong password';\n        };\n\n        return user;\n    };\n\n    const storeUserLibrary = async (token, body) => {\n\n        const options = {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer'+ token\n          },\n          body: JSON.stringify(body)\n        };\n\n        console.log(body);\n    \n        let url = `${BASE_URL}/wp-json/wp/v2/user_library`;\n        const response = await fetch(url, options);\n        return response.json();\n    };\n\n    const signup = async (body) => {\n        let url = `${apiConfig.baseURL}/wp-json/wp/v2/users/register`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Accept':'*'\n        };\n\n        const options = {\n            method: 'POST',\n            mode:'cors',\n            headers: headers,\n            body: JSON.stringify(body),\n        };\n\n        //const response = \n        await fetch(`${url}`, options);\n        // const user = await response.json();\n\n        let authUser = signIn(body.username, body.password);\n\n        return authUser;\n    };\n\n    const logout = async () => {\n        localStorage.setItem('authUser', null);\n        return true;\n    }\n\n    return (\n        <AuthContext.Provider value={{currentUser, signIn, logout, signup, storeUserLibrary }} >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport {\n    AuthContext,\n    AuthProvider,\n    useAuth,\n};","export default __webpack_public_path__ + \"static/media/Logo_LOCAL_wit.349b1623.png\";","export default __webpack_public_path__ + \"static/media/bars-solid-white.9d1d1cc6.svg\";","export default __webpack_public_path__ + \"static/media/close_white.a44463c9.svg\";","import React, { useState } from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\nimport './header.scss';\nimport { useAuth } from '../../services';\n\n\n\nimport logo from '../../static/logos/Logo_LOCAL_wit.png';\nimport hamburger from '../../static/icons/bars-solid-white.svg';\nimport close from '../../static/icons/close_white.svg';\n\nconst Header = () => {\n\n    const [open, setOpen] = useState(false);\n    const toggleTrue = () => setOpen(true);\n    const toggleFalse = () => setOpen(false);\n    const { logout } = useAuth();\n\n    let history = useHistory();\n    \n    const handleLogout = async () =>{\n        logout();\n        history.push(Routes.HOME);\n\t}\n\n    let user = JSON.parse(localStorage.getItem('authUser'));\n\n    return (\n        <div>\n            <div className='header-large-container'>\n                <div className='nav-container'>\n                    <Link to={Routes.HOME} >\n                        <img src={logo} alt='L.O.C.A.L. Radio'/>\n                    </Link>\n                    <Link to={Routes.HOME} >Home</Link>\n                    <Link to={Routes.ARTISTS} >Artists</Link>\n                    <Link to={Routes.CONTACT} >Contact</Link>\n                    <Link to={Routes.BROADCAST_FOLLOWED_USERS} >Radio</Link>\n                    <Link to={Routes.SONGS} >Music</Link>\n                    {user && <Link to={Routes.USER_ALBUM} >Library</Link> }\n                </div>\n                <div className='login-header-container'>\n                    {!user && <Link className='border' to={Routes.REGISTER} >REGISTER</Link>}\n                    {!user && <Link className='border' to={Routes.LOGIN} >LOGIN</Link>}\n                    {user && \n                    \n                        <button onClick={handleLogout} className='border' >LOGOUT</button>\n                    \n                    }\n                </div>\n            </div>\n            <div className='header-small-container'>\n                <div>\n                    <Link to={Routes.HOME} >\n                        <img src={logo} alt='L.O.C.A.L. Radio' />\n                    </Link>\n                </div>\n                <div>\n                    {!open  &&\n                        <button className='close-open-btn' onClick={toggleTrue}>\n                            <img src={hamburger} alt='click here' /> \n                        </button>\n                    }\n                    {open &&\n                        <div className=\"dropdown-container\" >\n                            <button className='close-open-btn' onClick={toggleFalse}>\n                                <img src={close} alt='click here' /> \n                            </button>\n                                <Link to={Routes.HOME} >Home</Link>\n                                <Link to={Routes.ARTISTS} >Artists</Link>\n                                <Link to={Routes.CONTACT} >Contact</Link>\n                                <Link to={Routes.BROADCAST_FOLLOWED_USERS} >Radio</Link>\n                                <Link to={Routes.SONGS} >Music</Link>\n                                {user && <Link to={Routes.USER_ALBUM} >Library</Link> }\n                                {!user && <Link className='border' to={Routes.REGISTER} >REGISTER</Link>}\n                                {!user && <Link className='border' to={Routes.LOGIN} >LOGIN</Link>}\n                                {user &&\n                                    <button className='btn-logout' onClick={handleLogout}  >LOGOUT</button>\n                                }\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport * as Routes from '../../routes';\nimport './footer.scss';\n\nimport logo from '../../static/logos/Logo_LOCAL_wit.png';\n\nconst Footer = () => {\n    return (\n        <div className='footer-container'>            \n            <Link to={Routes.HOME} >\n                <img src={logo} alt='L.O.C.A.L. Radio'/>\n            </Link>\n        </div>\n    );\n};\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/IMG-3657.2b545542.png\";","import React from 'react';\nimport './headerImage.scss';\nimport image from '../../static/images/IMG-3657.png';\n\nconst HeaderImage = () => {\n    return (\n        <div className='header-image-container'>\n            <img src={image} alt='a majestic header' />\n        </div>\n    );\n};\n\nexport default HeaderImage;","export default __webpack_public_path__ + \"static/media/pin.72e55ebe.svg\";","import React, {useState} from 'react';\nimport './locationSearchbar.scss';\n\n// eslint-disable-next-line no-unused-vars\nimport Geocode from 'node-open-geocoder';\n\nimport locationLogo from '../../static/icons/pin.svg';\nimport nodeOpenGeocoder from 'node-open-geocoder';\n\n\nconst LocationSearchbar = () => {\n\n\n    const [locate, setGeolocation] = useState(true);\n    const [locationForm, setLocationForm] = useState({\n        adress: ''\n    });\n\n    let lat;\n    let long;\n\n    const getLocation = (error) => {\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function(position) {\n                lat = position.coords.latitude;\n                long = position.coords.longitude;\n                console.log(lat, long);\n            });\n        } \n        else \n        {\n            setGeolocation(!locate);\n            console.log(locate);\n        }\n    };\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        // console.log(locationForm.adress);\n        nodeOpenGeocoder()\n            .geocode(locationForm.adress)\n            .end((err, res) => console.log(res));\n    };\n\n    const handleInputChange = (ev) => {\n        setLocationForm({\n            ...locationForm,\n            [ev.target.name]: ev.target.value\n        });\n    }\n\n    return (\n        <div className='locationSearchbar-container'>\n            <button onClick={getLocation} className='btn-location'>\n                <img src={locationLogo} alt='location' />\n                <h3>Search for L.O.C.A.L. artists</h3>\n            </button>\n            {!locate && <p>Geolocation is not available use the searchbar.</p>}\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <input placeholder='street, city, country' name='adress' type='text' onChange={handleInputChange}/>\n                    <button type='submit' >SEARCH</button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default LocationSearchbar;","export default __webpack_public_path__ + \"static/media/like_btn.623f4a02.svg\";","import React, {useEffect, useState, Fragment, useCallback} from 'react';\nimport  {default as classnames} from 'classnames';\nimport { useApi } from '../../services';\n\nimport './songs.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst SongList = ({children, amount, onReadmore, className, ...rest}) => {\n    const { findAllSongs } = useApi();\n    const { storeUserLibrary, findUserLibrary } = useApi();\n    const [songs, setSongs] = useState();\n    const [userLib, setUserLib] = useState();\n    const [songsPage, setSongsPage] = useState(1);\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    let token;\n    let userID ;\n\n    if(authUser) {\n        token = authUser.token;\n        userID = authUser.user_id    \n    }\n    const initFetch = useCallback(\n        () => {\n            const fetchSongs = async () => {\n                const data = await findAllSongs(1);\n                console.log(data);\n                setSongs(data);\n            };\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n            };\n            fetchSongs();\n            fetchLib();\n        }, [findAllSongs, findUserLibrary, userID],\n    );\n\n\n\n    useEffect(() => {\n        initFetch();\n        \n        return () => {\n            // nothing to clean up\n        }\n    }, [initFetch],)\n\n    const checkLiked = (song) => {\n        const likes = userLib.acf.songs;\n        if (likes) {\n            let liked = likes.includes(song.id);\n            return liked;\n        };\n    };\n\n\n    const unLikeSong = async (song) => {\n        const index = userLib.acf.songs.indexOf(song.id);\n        if (index !== -1) {\n            userLib.acf.songs.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    songs: userLib.acf.songs,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likeSong = async (song) => {\n\n        let likes = [];\n        if (userLib.acf.songs) {\n            userLib.acf.songs.push(song.id);\n            likes = userLib.acf.songs;\n        } else {\n            likes.push(song.id);\n        };\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                songs: likes,\n            }\n        };\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n\n    };\n\n    const handleLoadMore = async () => {\n        let number = songsPage + 1;\n        setSongsPage(number);\n\n        const data = await findAllSongs(number);\n\n        if (data !== 'no more posts') {\n            let newSongs = songs.concat(data);\n            console.log(newSongs);\n            setSongs(newSongs);\n        } else {\n            console.log('ran out of posts')\n        };\n\n    };\n\n    const checkFollowed = (song) => {\n        const artists = userLib.acf.artists;\n        \n        if (Array.isArray(artists)) {\n            let followed = artists.includes(song.acf.user_id.ID);\n            return followed;\n        } else if ( artists === song.acf.user_id.ID) {\n            return true;\n        };\n    };  \n\n    const follow = async (song) => {\n        let followed = [];\n        if (Array.isArray(userLib.acf.artists)) {\n            followed = userLib.acf.artists;\n            followed.push(parseInt(song.acf.user_id.ID));\n        } else if (isNaN(userLib.acf.artists)) {\n            followed.push(parseInt(userLib.acf.artists));\n            followed.push(parseInt(song.acf.user_id.ID));\n        } else {\n            followed.push(parseInt(song.acf.user_id.ID)); \n        };\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                artists: followed,\n            }\n        };\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    const unFollow = async (song) => {\n        if (Array.isArray(userLib.acf.artists)) {\n            const index = userLib.acf.artists.indexOf(song.acf.user_id.ID);\n            if (index !== -1) {\n                userLib.acf.artists.splice(index, 1)\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: userLib.acf.artists,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            };\n        };\n\n        if (!isNaN(userLib.acf.artists)) {\n\n            if (userLib.acf.artists === song.acf.user_id.ID) {\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: false,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            }\n        };\n\n    };\n\n    const filterTitle = (title) => {\n        const titlename = title.replace(/[0-9]/g, '');\n        const titlenameSplice = titlename.replace(/.mp|-|;|#|@|/, \"\");\n        const titlenameSpliced = titlenameSplice.replace('#', \"\");\n        const titleFiltered = titlenameSpliced.replace('('|'&;'|'#'|';'|')'|'.mp','');\n        const titleExtraFiltered = titleFiltered.replace(/[^\\w\\s]/gi, '');\n        const rmMp = titleExtraFiltered.replace('mp', '');\n        return rmMp;\n    };\n\n\n    return(\n        <div className=\"songs-container\">\n            {songs && songs.map((song, index) => (\n                <div className='song-container' key={index}>\n                    <div>\n                        {song.acf.picture &&\n                            <img className='cover' src={song.acf.picture} alt={song.title.rendered} />\n                        }\n                        {!song.acf.picture &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='song-text'>\n                        <div>\n                            Title: {filterTitle(song.title.rendered)}\n                        </div>\n                        <div>\n                            {song.acf.user_id.display_name &&\n                                <p>Artist: {song.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <div>\n                            <audio controls>\n                                <source src={song.acf.audio.source_url}/>\n                                <source type='audio/mpeg'/>\n                                browser doesn't support audio.\n                            </audio>\n                        </div>\n\n                        <div className='like-location-container'>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkFollowed(song) &&\n                                        <button className='follow' onClick={() => unFollow(song)}>\n                                            unfollow artist\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkFollowed(song) &&\n                                        <button className='follow' onClick={() => follow(song)}>\n                                           follow artist\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                        }\n                            {!!userLib ? \n                                <div>\n                                    {\n                                        checkLiked(song) &&\n                                        <button className='unlike' onClick={() => unLikeSong(song)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLiked(song) &&\n                                        <button onClick={() => likeSong(song)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n                               \n                                </div>\n                                :<div></div>\n                            }\n                            {song.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                            \n                        </div>\n                        \n                    </div>  \n                   \n                </div>  \n                \n            ))}\n           \n           <button id='load' onClick={handleLoadMore} >Load More</button>\n        </div>\n    );\n};\n\nexport default SongList;","import React,{useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { useApi } from '../../services';\nimport * as Routes from '../../routes';\nimport './uploadSong.scss';\n\nconst UploadSong = () => {\n\n    let history = useHistory();\n\n    const [metaData, setmetaData] = useState({\n        title: '',\n        description:'',\n        artist:'',\n        user_id: ''\n    });\n\n\n    const { storeSong } = useApi()\n    const { storeMediaSong } = useApi();\n    const { storeMediaPicture } = useApi();\n\n\n    const handleInputChange = (ev) => {\n        setmetaData({\n          ...metaData,\n          [ev.target.name]: ev.target.value\n        });\n    }\n\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n\n    const uploadFiles = async () => {\n\n        let audioData\n        let pictureData;\n\n        if(document.getElementById(\"cover-input\") !== null) {\n            const coverInput = document.getElementById(\"cover-input\");\n            const pictureForm = new FormData();\n            pictureForm.append(\"file\", coverInput.files[0]);\n            pictureData = await storeMediaPicture(token , pictureForm);\n        };\n\n        const audioInput = document.getElementById(\"audio-input\");\n\n        const songForm = new FormData();\n        songForm.append(\"file\", audioInput.files[0]);\n        console.log(songForm);\n        \n        audioData = await storeMediaSong(token, songForm)\n\n        let body = {\n            \"status\":\"publish\",\n            title: metaData.title,\n            fields:{\n                audio: audioData.source_url,\n                description: metaData.description,\n                picture: pictureData.source_url,\n                artist: metaData.artist,\n                user_id: authUser.user_id,\n            }\n        }\n\n        return body;\n    }\n\n    const handleSubmit =  async (ev) => {\n\n        ev.preventDefault();\n\n        let body = await uploadFiles();\n\n        await storeSong(body,  token);\n        history.push(Routes.ARTISTS);\n    };\n\n    return(\n        <div className='UploadSong-container'>\n            <form onSubmit={handleSubmit} >\n                <div>\n                    <p>Upload file (.mp3)</p>\n                    <input id='audio-input' type='file' name='audiofile'  accept=\".mp3,audio/*\" />\n                </div>\n                <div>\n                    <p>Upload cover</p>\n                    <input id='cover-input' type='file'  accept=\"image/x-png,image/gif,image/jpeg\" name='coverfile'  />\n                </div>\n                <div>\n                    <p>Title:</p>\n                    <input className=\"input-text\"  type='text' name='title' placeholder='title' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <p>Artist:</p>\n                    <input className=\"input-text\"  type='text' name='artist' placeholder='artist' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <p>Description:</p>\n                    <textarea className=\"input-text\" rows='5' type='text' name='description' placeholder='description' onChange={handleInputChange}/>\n                </div>\n                <button type=\"submit\">Upload</button>\n            </form>\n        </div>\n    );\n}\n\nexport default UploadSong;","import React, {useState} from 'react';\nimport './login.scss';\nimport { useHistory } from 'react-router';\nimport { useAuth} from '../../services';\nimport * as Routes from '../../routes';\n\nconst Login = () => {\n\n\n    const { signIn } = useAuth();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [ wrongCreds, setWrongCreds ] = useState();\n    let history = useHistory();\n\n    const handleSubmit = async (ev) => {\n        ev.preventDefault();\n        const user = await signIn(username, password);\n        if (user !== 'wrong password') {\n          history.push(Routes.HOME);\n        };\n        if (user === 'wrong password') {\n            console.log('wrong credentials');\n            setWrongCreds(true);\n        }\n    };\n\n    return (\n        <div className='login-component-container'>\n            <form onSubmit={(ev) => handleSubmit(ev)}>\n                <div>\n                    <label>\n                        Username:\n                    </label>\n                    <input type='text' name='username' placeholder='username' onChange={(ev) => setUsername(ev.target.value)} />\n                </div>\n                <div>\n                    <label>\n                        Password:\n                    </label>\n                    <input type='password' name='password' placeholder='password' onChange={(ev) => setPassword(ev.target.value)} />\n                </div>\n                <button type='submit'>Sign in</button>\n                {wrongCreds &&\n                    <div className='wc-error'>\n                        <p>Wrong credentials!</p>\n                    </div>\n                }\n            </form>\n        </div>\n    );\n}\n\nexport default Login;","import React, {useState} from 'react';\nimport './login.scss';\nimport { useHistory } from 'react-router';\nimport {useAuth} from '../../services';\nimport * as Routes from '../../routes';\n\nconst Register = () => {\n\n\n    const { signup, storeUserLibrary } = useAuth();\n    const [body, setBody] = useState({\n        username: '',\n        password:'',\n        email:''\n    });\n    const [ role, setRole ] = useState('artist');\n\n    let history = useHistory();\n\n    const handleSubmit = async (ev) => {\n        ev.preventDefault();\n\n        const data = ({\n            username: body.username,\n            password: body.password,\n            email: body.email,\n            role: role\n        });\n\n        const authUser = await signup(data);\n\n            // const authUser = JSON.parse(localStorage.getItem('authUser')); \n            const libraryBody = {\n                title : authUser.user_display_name+'\\'s library',\n                \"status\": 'publish',\n                fields: {\n                    user_id: authUser.user_id,\n                    role: role\n                }\n            };\n        \n        \n        const res = await storeUserLibrary(authUser.token, libraryBody);\n        console.log(res);\n        if (res) {\n           history.push(Routes.HOME);\n        };\n    };\n\n    /*\n    if (JSON.parse(localStorage.getItem('authUser')) !== null) {\n\n        const authUser = JSON.parse(localStorage.getItem('authUser')); \n        const libraryBody = {\n            title : authUser.user_display_name+'\\'s library',\n            status: 'publish',\n            fields: {\n                user_id: authUser.user_id,\n                role: role[0]\n            }\n        };\n\n        console.log(authUser.token);\n        const library = storeUserLibrary(authUser.token, libraryBody);\n        console.log(library);\n    };\n    */\n\n    const handleInputChange = (ev) => {\n        setBody({\n          ...body,\n          [ev.target.name]: ev.target.value\n        });\n    };\n    \n      const handleSelectChange = (ev) => {\n        setRole([ev.target.value]);\n    };\n\n\n    return (\n        <div className='login-component-container'>\n            <form onSubmit={(ev) => handleSubmit(ev)}>\n                <div>\n                    <label>\n                        E-mail:\n                    </label>\n                    <input type='email' name='email' placeholder='email' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label>\n                        Username:\n                    </label>\n                    <input type='text' name='username' placeholder='username' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label>\n                        Password:\n                    </label>\n                    <input type='password' name='password' placeholder='password' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label>\n                        Are you an artist or just here to listen?\n                    </label>\n                    <select multiple={false}  name='role' id='role' onChange={handleSelectChange}>\n                        <option value={'artist'}>Artist</option>\n                        <option value={'luisteraar'}>Listner</option>\n                    </select>\n                </div>\n                <button type='submit'>Register</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Register;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './musicSearchbar.scss';\nimport * as Routes from '../../routes';\n\nconst MusicSearchbar = () => {\n    return (\n        <div className='MusicSearchbar-container'>\n            <div>\n                <Link to={Routes.SONGS} >Songs</Link>\n                <Link to={Routes.ALBUMS}>Albums</Link>\n                <Link to={Routes.PLAYLISTS}>Playlists</Link>\n            </div>\n            <div className='searchBar-music'>\n\n            </div>\n        </div>\n    );\n}\n\nexport default MusicSearchbar;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './musicSearchbar.scss';\nimport * as Routes from '../../routes';\n\nconst LibrarySearchbar = () => {\n    return (\n        <div className='MusicSearchbar-container'>\n            <div>\n                <Link to={Routes.USER_SONGS} >Songs</Link>\n                <Link to={Routes.USER_ALBUM}>Albums</Link>\n                <Link to={Routes.USER_PLAYLISTS}>Playlists</Link>\n            </div>\n            <div className='searchBar-music'>\n\n            </div>\n        </div>\n    );\n}\n\nexport default LibrarySearchbar;","import React from 'react';\nimport './musicSearchbar.scss';\nimport * as Routes from '../../routes';\nimport {useParams, Link} from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\n\nconst RadioSearchBar = () => {\n\n    const { id } = useParams();\n    let history = useHistory();\n\n    const handleReadSongs = () => {\n        history.push(`${Routes.BROADCAST_SONGS.replace(':id', id)}`);\n    };\n\n    const handleReadAlbums = () => {\n        history.push(`${Routes.BROADCAST_ALBUMS.replace(':id', id)}`);\n    };\n\n    const handleReadPlaylist = () => {\n        history.push(`${Routes.BROADCAST_PLAYLISTS.replace(':id', id)}`);\n    };\n\n    return (\n        <div className='MusicSearchbar-container'>\n            <div>\n                <Link to={Routes.BROADCAST_FOLLOWED_USERS} >Back</Link>\n                <button onClick={handleReadSongs} >Songs</button>\n                <button onClick={handleReadAlbums}>Albums</button>\n                <button onClick={handleReadPlaylist}>Playlists</button>\n            </div>\n            <div className='searchBar-music'>\n\n            </div>\n        </div>\n    );\n}\n\nexport default RadioSearchBar;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './albumList.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst AlbumList = ({children, amount, onReadMore, className, ...rest}) => {\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    let token;\n    let userID ;\n    if(authUser) {\n        token = authUser.token;\n        userID = authUser.user_id    \n    };\n    const { findAllAlbums, findUserLibrary, storeUserLibrary } = useApi();\n    const [albums, setAlbums] = useState();\n    const [albumPage, setAlbumPage] = useState(1);\n    const [userLib, setUserLib] = useState({\n        acf: {\n            albums:[]\n        }\n    });\n\n    const initFetch = useCallback(\n            () => {\n            const fetchAlbums = async () => {\n                const data = await findAllAlbums(1);\n                setAlbums(data);\n            };\n\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n            };\n\n            fetchLib();\n            fetchAlbums();\n        }, [findAllAlbums, findUserLibrary, userID],\n    );\n\n    const handleReadMore = (ev, albumId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n                onReadMore(albumId);\n        };\n    };\n\n    useEffect(() => {\n        initFetch();\n        return () => {\n        }\n    }, [initFetch]);\n\n    const handleLoadMore = async () => {\n        let number = albumPage + 1;\n        setAlbumPage(number);\n\n        const data = await findAllAlbums(number);\n\n        if (data !== 'no more posts') {\n            let newAlbums = albums.concat(data);\n            setAlbums(newAlbums);\n        } else {\n            console.log('ran out of posts')\n        };\n\n    };\n\n\n    const checkLikedAlbum = (album) => { \n        const likes = userLib.acf.albums;\n        if (likes) {\n            let liked = likes.includes(album.id);\n            return liked;\n        };\n    };\n\n    const unLikeAlbum = async (album) => {\n        // Index van unliked album ophalen en deze uit array splicen als deze niet -1 is.\n        const index = userLib.acf.albums.indexOf(album.id);\n        if (index !== -1) {\n            userLib.acf.albums.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    albums: userLib.acf.albums,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likeAlbum = async (album) => {\n\n        let likes = [];\n        if (userLib.acf.albums) {\n            userLib.acf.albums.push(album.id);\n            likes = userLib.acf.albums;\n        } else {\n            likes.push(album.id);\n        };\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                albums: likes,\n            }\n        }\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    const checkFollowed = (album) => {\n        const artists = userLib.acf.artists;\n        \n        if (Array.isArray(artists)) {\n            let followed = artists.includes(album.acf.user_id.ID);\n            return followed;\n        } else if ( artists === album.acf.user_id.ID) {\n            return true;\n        };\n    };  \n\n    const follow = async (album) => {\n        let followed = [];\n        if (Array.isArray(userLib.acf.artists)) {\n            followed = userLib.acf.artists;\n            console.log(album.acf.user_id.ID)\n            followed.push(album.acf.user_id.ID);\n        } else if (isNaN(userLib.acf.artists)) {\n            let parsedId = userLib.acf.artists.replace('[', '');\n            parsedId = parsedId.replace(']','');\n            followed.push(parseInt(parsedId));\n            followed.push(parseInt(album.acf.user_id.ID));\n            console.log(album.acf.user_id.ID)\n        } else {\n            followed.push(parseInt(album.acf.user_id.ID)); \n        };\n\n        console.log(userLib.acf.artists)\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                artists: followed,\n            }\n        };\n\n        console.log(postObj)\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    const unFollow = async (album) => {\n        if (Array.isArray(userLib.acf.artists)) {\n            const index = userLib.acf.artists.indexOf(album.acf.user_id.ID);\n            if (index !== -1) {\n                userLib.acf.artists.splice(index, 1)\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: userLib.acf.artists,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            };\n        };\n\n        if (!isNaN(userLib.acf.artists)) {\n\n            if (userLib.acf.artists === album.acf.user_id.ID) {\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: false,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            }\n        };\n\n    };\n\n    return(\n        <div className=\"albums-container\">\n            {albums && albums.map((album, index) => (\n                <div className='album-container' key={index}>\n                    <div>\n                        {album.acf.cover &&\n                            <img className='cover' src={album.acf.cover} alt={album.title.rendered} />\n                        }\n                        {!album.acf.cover &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='album-text'>\n                        <div className='title'>\n                            Title: {album.title.rendered}\n                        </div>\n                        <div>\n                            {album.acf.user_id.display_name &&\n                                <p>Artist: {album.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <button className='listen-to-album' onClick={ev => handleReadMore(ev, album.id)}>\n                            Listen to album\n                        </button>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkFollowed(album) &&\n                                        <button className='follow' onClick={() => unFollow(album)}>\n                                            unfollow artist\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkFollowed(album) &&\n                                        <button className='follow' onClick={() => follow(album)}>\n                                           follow artist\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                        }\n                        <div className='like-location-container'>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkLikedAlbum(album) &&\n                                        <button className='unlike' onClick={() => unLikeAlbum(album)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLikedAlbum(album) &&\n                                        <button onClick={() => likeAlbum(album)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                            }\n                            {album.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            ))}\n             <button id='load' onClick={handleLoadMore} >Load More</button>\n        </div>\n    );\n};\n\nexport default AlbumList;","import React, { useState, useEffect, Fragment, useCallback } from 'react';\n\nimport {useApi} from '../../services';\nimport {useParams} from 'react-router-dom';\n\n\nimport './albumDetail.scss';\n\nconst AlbumDetail = () => {\n\n    const { id } = useParams();\n\tconst { findAlbum, findSong } = useApi();\n    const [ album, setAlbum ] = useState();\n    const [ nummersAlbum, setNummers ] = useState([]);\n\n    const initFetch = useCallback (\n        () => {\n            let nummers;\n            const fetchAlbum = async () => {\n                const data = await findAlbum(id);\n                setAlbum(data);\n                nummers = data.acf.nummers;\n                let numArray = [];\n                for (const nummer of nummers) {\n                    const data = await findSong(nummer);\n\n                    numArray.push(data);\n                }\n                setNummers(numArray);\n            }\n\n            fetchAlbum();\n\n        }, [findAlbum, id, findSong],\n    );\n\n\tuseEffect(() =>{\n\n        initFetch()\n\t\treturn () => {\n\n\t\t}\n\t}, [initFetch]);\n\n    \n    const filterTitle = (title) => {\n        const titlename = title.replace(/[0-9]/g, '');\n        const titlenameSplice = titlename.replace(/.mp|-|;|#|@|/, \"\");\n        const titlenameSpliced = titlenameSplice.replace('#', \"\");\n        const titleFiltered = titlenameSpliced.replace('('|'&;'|'#'|';'|')'|'.mp','');\n        const titleExtraFiltered = titleFiltered.replace(/[^\\w\\s]/gi, '');\n        const rmMp = titleExtraFiltered.replace('mp', '');\n        return rmMp;\n    };\n\n    return (\n        <Fragment>\n            \n            {!!album\n            ?   <div className='album-detail'>\n                    <div>\n                        {album.acf.cover &&\n                            <img className='cover' src={album.acf.cover} alt={album.title.rendered} />\n                        }\n                        {!album.acf.cover &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='album-text'>\n                        <div>\n                            Title: {album.title.rendered}\n                        </div>\n                        <div>\n                            {album.acf.artist &&\n                                <p>Artist: {album.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <div className='like-location-container'>\n\n                            {album.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                        <div>\n                            <p>Songs:</p>\n                            {!!nummersAlbum ? \n                            nummersAlbum.map((song, index) => (\n                                <div  key={index}>\n                                    <p>Title: {filterTitle(song.title.rendered)}</p>\n                                    <audio controls>\n                                        <source src={song.acf.audio.source_url}/>\n                                        <source type='audio/mpeg'/>\n                                        browser doesn't support audio.\n                                    </audio>\n                                </div>\n                            )):<div></div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                :<div></div>}\n                \n        </Fragment>\n        \n    );\n}\n\nexport default AlbumDetail;","import React,{useState, useEffect, useCallback, useLayoutEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { useApi } from '../../services';\nimport * as Routes from '../../routes';\nimport './albumUpload.scss';\n\n\n// content ACF omzetten in array van links voor nummers dan input naar multiple zetten api services aanpassen.\n// foreach voor elk liedje in array van input files om zo up te loaden\n\nconst AlbumUploadWithRel = () => {\n\n    let history = useHistory();\n\n    const [coverUrl, setCoverUrl] = useState();\n    const [userLib, setUserLib] = useState({\n\n    });\n    const [metaData, setmetaData] = useState({\n        title: '',\n        description:'',\n        artist:'',\n        user_id: ''\n    });\n\n    const [song, setSong] = useState();\n\n\n    const { storeAlbum, storeUserLibrary, findUserLibrary, storeSong } = useApi()\n    const { storeMediaSong } = useApi();\n    const { storeMediaPicture } = useApi();\n\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = authUser.user_id;\n\n    const initFetch = useCallback(\n        () => {\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n            }\n            fetchLib();\n        },[findUserLibrary, userID]\n    );\n\n    useEffect(() => {\n        initFetch();\n\n        return () => {\n\n        }\n    }, [initFetch]);\n\n    const handleInputChange = (ev) => {\n        setmetaData({\n          ...metaData,\n          [ev.target.name]: ev.target.value\n        });\n    }\n\n\n\n    const uploadFiles = async () => {\n\n        let audioData = []; \n        let pictureData;\n\n        if(document.getElementById(\"cover-input\") != null) {\n            const coverInput = document.getElementById(\"cover-input\");\n            const pictureForm = new FormData();\n            pictureForm.append(\"file\", coverInput.files[0]);\n            pictureData = await storeMediaPicture(token , pictureForm);\n            setCoverUrl(pictureData);\n        }\n\n        const audioInput = document.getElementById(\"audio-input\");\n\n        const files = audioInput.files;\n        for (const file of files) {\n            console.log(file.name);\n            const albumForm = new FormData();\n            albumForm.append(\"file\", file);\n            let audioPath = await storeMediaSong(token, albumForm);\n            \n            const filename = file.name.replace(/[0-9]/g, '');\n            const filenameSplice = filename.replace(\".mp\", \"\");\n            const filenameDone = filenameSplice.replace(\"-\",\"\");\n            //console.log(filenameDone);\n            const body = {\n                status:'publish',\n                title: filenameDone,\n                fields:{\n                    user_id: userID,\n                    audio: audioPath,\n                    description: metaData.description,\n                    cover: coverUrl,\n                }\n            }\n            \n\n            const data = await storeSong(body, token);\n            audioData.push(data.id);\n\n        }\n\n\n        let body = {\n            \"status\":\"publish\",\n            title: metaData.title,\n            fields:{\n                nummers: audioData,\n                description: metaData.description,\n                cover: pictureData.source_url,\n                artist: metaData.artist,\n                user_id: authUser.user_id,\n            }\n        }\n\n        return body;\n    }\n    \n\n    const handleSubmit =  async (ev) => {\n\n        ev.preventDefault();\n\n        let body = await uploadFiles();\n        \n        let response = await storeAlbum(body,  token);\n        console.log(response);\n        console.log(userLib);\n        if (!userLib.acf.artist_albums) {\n            userLib.acf.artist_albums = response.id\n        } else {\n            userLib.acf.artist_albums.push(response.id);\n        }\n        \n        const userLibObj ={\n            id: userLib.id,\n            fields:{\n                artist_albums: userLib.acf.artist_albums,\n            }\n        }\n        const res = await storeUserLibrary(userLibObj, token, userLib.id);\n        console.log(res);\n        history.push(Routes.ARTISTS);\n    };\n\n    return(\n        <div className='UploadAlbum-container'>\n            <form onSubmit={handleSubmit} >\n                <h3>Upload Album</h3>\n                <div>\n                    <p>Upload song files (.mp3)</p>\n                    <input id='audio-input' accept=\".mp3,audio/*\"  type='file' name='audiofile'  multiple/>\n                </div>\n                <div>\n                    <p>Upload album cover</p>\n                    <input  accept=\"image/x-png,image/gif,image/jpeg\"  id='cover-input' type='file' name='coverfile'  />\n                </div>\n                <div>\n                    <p>Album title:</p>\n                    <input className=\"input-text\"  type='text' name='title' placeholder='title' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <p>Artist:</p>\n                    <input className=\"input-text\"  type='text' name='artist' placeholder='artist' onChange={handleInputChange} />\n                </div>\n                <div>\n                    <p>Album description:</p>\n                    <textarea className=\"input-text\" rows='5' type='text' name='description' placeholder='description' onChange={handleInputChange}/>\n                </div>\n                <button type=\"submit\">Upload</button>\n            </form>\n        </div>\n    );\n}\n\nexport default AlbumUploadWithRel;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './playlistList.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst PlaylistList = ({children, amount, onReadMore, className, ...rest}) => {\n    const { findAllPlaylists, findUserLibrary, storeUserLibrary } = useApi();\n    const [playlists, setPlaylists] = useState();\n    const [playlistsPage, setPlaylistsPage] = useState(1);\n    const [userLib, setUserLib] = useState({\n        acf: {\n            playlists:[]\n        }\n    });\n\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = authUser.user_id;\n    \n    const initFetch = useCallback(\n        () => {\n            const fetchPlaylists = async () => {\n                const data = await findAllPlaylists(1);\n                setPlaylists(data);\n            };\n\n\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n            };\n\n            fetchLib();\n            fetchPlaylists();\n        }, [findAllPlaylists, findUserLibrary, userID],\n    );\n\n    const handleReadMore = (ev, playlistId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            onReadMore(playlistId);\n        }\n    };\n\n    useEffect(() => {\n        initFetch();\n        return () => {\n            // nothing to clean up\n        }\n    }, [initFetch])\n\n    const handleLoadMore = async () => {\n        let number = playlistsPage + 1;\n        setPlaylistsPage(number);\n\n        const data = await findAllPlaylists(number);\n\n        if (data !== 'no more posts') {\n            let newPlaylists = playlists.concat(data);\n            setPlaylists(newPlaylists);\n        } else {\n            console.log('ran out of posts')\n        };\n\n    };\n\n    const checkLikedPlaylist= (playlist) => { \n        const likes = userLib.acf.playlists;\n        if (likes) {\n            let liked = likes.includes(playlist.id);\n            return liked;\n        };\n    };\n\n    const unLikePlaylist = async (playlist) => {\n        // Index van unliked playlist ophalen en deze uit array splicen als deze niet -1 is.\n        const index = userLib.acf.playlists.indexOf(playlist.id);\n        if (index !== -1) {\n            userLib.acf.playlists.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    playlists: userLib.acf.playlists,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likePlaylist = async (playlist) => {\n        let postObj;\n        if (!userLib.acf.playlists) {\n            let playlistArray = [];\n            playlistArray.push(playlist.id);\n            postObj = {\n                //title: userLib.title,\n                id: userLib.id,\n                fields: {\n    \n                    playlists: playlistArray,\n    \n                }\n            };\n        } else {\n            userLib.acf.playlists.push(playlist.id);\n            postObj = {\n                //title: userLib.title,\n                id: userLib.id,\n                fields: {\n                    playlists: userLib.acf.playlists,\n                }\n            };\n        };\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    console.log(playlists)\n\n    const checkFollowed = (playlist) => {\n        const artists = userLib.acf.artists;\n        \n        if (Array.isArray(artists)) {\n            let followed = artists.includes(playlist.acf.user_id.ID);\n            return followed;\n        } else if ( artists === playlist.acf.user_id.ID) {\n            return true;\n        };\n    };  \n\n    const follow = async (playlist) => {\n        let followed = [];\n        if (Array.isArray(userLib.acf.artists)) {\n            followed = userLib.acf.artists;\n            followed.push(parseInt(playlist.acf.user_id.ID));\n        } else if (isNaN(userLib.acf.artists)) {\n            followed.push(parseInt(userLib.acf.artists));\n            followed.push(parseInt(playlist.acf.user_id.ID));\n        } else {\n            followed.push(parseInt(playlist.acf.user_id.ID)); \n        };\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                artists: followed,\n            }\n        };\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    const unFollow = async (playlist) => {\n        if (Array.isArray(userLib.acf.artists)) {\n            const index = userLib.acf.artists.indexOf(playlist.acf.user_id.ID);\n            if (index !== -1) {\n                userLib.acf.artists.splice(index, 1)\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: userLib.acf.artists,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            };\n        };\n\n        if (!isNaN(userLib.acf.artists)) {\n\n            if (userLib.acf.artists === playlist.acf.user_id.ID) {\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: false,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            }\n        };\n\n    };\n\n\n\n    return(\n        <div className=\"playlists-container\">\n            {playlists && playlists.map((playlist, index) => (\n                <div className='playlist-container' key={index}>\n                    <div className='playlist-text'>\n                        <div>\n                            Title: {playlist.title.rendered}\n                        </div>\n                        <div>\n                            {playlist.acf.description &&\n                                <p>Description: {playlist.acf.description}</p>\n                            }\n                        </div>\n                        <div>\n                            <button className='listen-to-playlist' onClick={(ev) => handleReadMore(ev, playlist.id)} >\n                                Listen to playlist\n                            </button>\n                        </div>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkFollowed(playlist) &&\n                                        <button className='follow' onClick={() => unFollow(playlist)}>\n                                            unfollow artist\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkFollowed(playlist) &&\n                                        <button className='follow' onClick={() => follow(playlist)}>\n                                           follow artist\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                        }\n                        <div className='like-location-container'>\n\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkLikedPlaylist(playlist) &&\n                                        <button id='unlike' onClick={() => unLikePlaylist(playlist)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLikedPlaylist(playlist) &&\n                                        <button onClick={() => likePlaylist(playlist)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                            }\n                            {playlist.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            ))}\n             <button id='load' onClick={handleLoadMore} >Load More</button>\n        </div>\n    );\n};\n\nexport default PlaylistList;","import React, {useState, useCallback, useEffect} from 'react';\nimport './makePlaylist.scss';\nimport {useHistory} from 'react-router-dom';\nimport {useApi} from '../../services';\nimport * as Routes from '../../routes';\n\n\nconst MakePlaylist = () => {\n\n    const history = useHistory();\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = parseInt(authUser.user_id);\n    const [userLib, setUserLib] = useState();\n\n    const {storePlaylist, findSong,findAllAlbumsNotPaged,findAllSongsNotPaged, findAlbum, findUserLibrary, storeUserLibrary} = useApi();\n    const [songs, setSongs] = useState();\n    const [albums, setAlbums] = useState(null);\n    const [playlist, setPlaylist] = useState({\n        title: '',\n        status:'publish',\n        fields:{\n            albums:[],\n            songs:[],\n            description:'',\n            user_id: userID,\n        }\n    });\n\n    const initFetch = useCallback(\n        () => {\n\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n                let albumIds = body[0].acf.artist_albums;\n                let albumData = [];\n                for ( const album of albumIds ) {\n                    const data = await findAlbum(album);\n                    albumData.push(data);\n                };\n                let songIds = body[0].acf.artist_songs;\n                let songData = [];\n                for ( const song of songIds ) {\n                    const data = await findSong(song);\n                    songData.push(data);\n                };\n                \n                setSongs(songData);\n                setAlbums(albumData);\n            };\n\n            fetchLib();\n        }, [findUserLibrary, userID, findAlbum, findSong],\n    );\n\n    useEffect(() => {\n        initFetch();\n        \n        return () => {\n            // nothing to clean up\n        }\n    }, [initFetch],);\n\n    const checkAddedSongs = (song) => {\n        const added = playlist.fields.songs;\n        let add = added.includes(song.id);\n        return add;\n    };\n\n    const checkAddedAlbums = (album) => {\n        const added = playlist.fields.albums;\n        let add = added.includes(album.id);\n        return add;\n    };\n\n    const addSong = (song) => {\n        playlist.fields.songs.push(song.id);\n        const playlistAdd = {\n            title: playlist.title,\n            status: playlist.status,\n            fields: {\n\n                songs: playlist.fields.songs,\n                albums: playlist.fields.albums,\n                description: playlist.description,\n                user_id: userID,\n            }\n        }\n\n        setPlaylist(playlistAdd);\n    };\n\n    const removeAlbum = (album) => {\n        const index = playlist.fields.songs.indexOf(album.id);\n        if (index !== -1) {\n            playlist.fields.albums.splice(index, 1);\n            const playlistRemove = {\n                title: playlist.title,\n                status: playlist.status,\n                fields: {\n    \n                    songs: playlist.fields.songs,\n                    albums: playlist.fields.albums,\n                    description: playlist.description,\n                    user_id: userID,\n                }\n            }\n            setPlaylist(playlistRemove);\n        }\n    }\n\n    const removeSong = (song) => {\n        const index = playlist.fields.songs.indexOf(song.id);\n        if (index !== -1) {\n            playlist.fields.songs.splice(index, 1);\n            const playlistRemove = {\n                title: playlist.title,\n                status: playlist.status,\n                fields: {\n    \n                    songs: playlist.fields.songs,\n                    albums: playlist.fields.albums,\n                    description: playlist.description,\n                    user_id: userID,\n                }\n            }\n            setPlaylist(playlistRemove);\n        }\n    }\n\n    const addAlbum = (album) => {\n        playlist.fields.albums.push(album.id);\n        const playlistAdd = {\n            title: playlist.title,\n            status: playlist.status,\n            \n            fields: {\n\n                songs: playlist.fields.songs,\n                albums:  playlist.fields.albums,\n                description: playlist.description,\n                user_id: userID,\n\n            }\n        }\n        setPlaylist(playlistAdd);\n    };\n\n\n\n    const handleInputChange = (ev) => {\n        setPlaylist({\n          ...playlist,\n          [ev.target.name]: ev.target.value\n        });\n    };\n\n    const handleSubmit = async (ev) => {\n        ev.preventDefault();\n        console.log(userID)\n        console.log(playlist);\n\n        const reqPlaylist = {\n            title: playlist.title,\n            status: playlist.status,\n            \n            fields: {\n\n                songs: playlist.fields.songs,\n                albums:  playlist.fields.albums,\n                description: playlist.description,\n                user_id: userID,\n\n            }\n        };\n\n        \n        const response = await storePlaylist(reqPlaylist, token);\n        userLib.acf.artist_playlists.push(response.id);\n        const userLibObj = {\n            id: userLib.id,\n            fields:{\n                artist_playlists: userLib.acf.artist_playlists,\n            }\n        }\n\n        const res = await storeUserLibrary(userLibObj, token, userLib.id);\n        console.log(res);\n        history.push(Routes.ARTISTS);\n        \n    };\n\n\n    return (\n        <div className='MakePlaylist-container'>\n            <h2>Make playlist</h2>\n            <form onSubmit={(ev) => handleSubmit(ev)}>\n                <div>\n                    <p>Title</p>\n                    <input onChange={handleInputChange} type='text' name='title' placeholder='title' />\n                </div>\n                <div>\n                    <p>Description</p>\n                    <textarea onChange={handleInputChange} rows='8' type='text' name='description' placeholder='description' />\n                </div>\n                <button type='submit' >Make playlist</button>\n            </form>\n\n            <div>\n            <h3>Songs</h3>\n                {\n                    songs && songs.map((song, index) =>(\n                        <div className='playlist-flex' key={index}>\n                            <div>\n                                <div>\n                                    Title: {song.title.rendered}\n                                </div>\n                                <div>\n                                {song.acf.artist &&\n                                    <p className='p-border' >Artist: {song.acf.artist}</p>\n                                }\n                                </div>\n                            </div>\n                            {!!playlist ?\n\n                            <div>\n                            {\n                                !checkAddedSongs(song) &&\n                                <button onClick={() => addSong(song)} >Add to playlist</button>\n                            }\n                            {\n                                checkAddedSongs(song) &&\n                                <button onClick={() => removeSong(song)} >Remove from playlist</button>\n                            }\n                            </div>\n                            :<div></div>\n                            }\n                            \n                        </div>\n                    ))\n                }\n            </div>\n            <div>\n            <h3>Albums</h3>\n                {!!albums ?\n                    <div>\n                    {\n                        albums && albums.map((album, index) =>(\n                            <div className='playlist-flex' key={index}>\n                                <div>\n                                    <div>\n                                        Album title: {album.title.rendered}\n                                    </div>\n                                    <div>\n                                    {album.acf.artist &&\n                                        <p className='p-border' >Album artist: {album.acf.artist}</p>\n                                    }\n                                    </div>\n                                </div>\n                                {!!playlist ?\n\n                                    <div>\n                                    {\n                                        !checkAddedAlbums(album) &&\n                                        <button onClick={() => addAlbum(album)} >Add to playlist</button>\n                                    }\n                                    {\n                                        checkAddedAlbums(album) &&\n                                        <button onClick={() => removeAlbum(album)} >Remove from playlist</button>\n                                    }\n                                    </div>\n                                    :<div></div>\n                                }\n                            </div>\n                        ))\n                    }\n                    </div>\n                :<div></div> }\n            </div>\n        </div>\n    );\n}\n\nexport default MakePlaylist;","import React, { useState, useEffect, Fragment, useCallback } from 'react';\n\nimport {useApi} from '../../services';\nimport {useParams, useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\nimport './playlistDetail.scss';\n\nconst PlaylistDetail = ({children, amount, onReadMore, className, ...rest}) => {\n\n    const { id } = useParams();\n\tconst { findPlaylist, findSong, findAlbum } = useApi();\n    const [ playlist, setPlaylist ] = useState();\n    const [ songs, setSongs ] = useState();\n    const [ albums, setAlbums ] = useState();\n\n    const initFetch = useCallback (\n        () => {\n\n            const fetchPlaylist = async () => {\n                const data = await findPlaylist(id);\n                setPlaylist(data);\n\n                console.log(data)\n                let albumAr = data.acf.albums;\n                let songAr = data.acf.songs;\n                \n                let albumsArray=[];\n                let songsArray=[];\n                for (const album of albumAr) {\n                    const albumData = await findAlbum(album);\n                    albumsArray.push(albumData);\n\n                }\n                for (const song of songAr) {\n                    const songData = await findSong(song);\n                    songsArray.push(songData);\n                }\n\n                setAlbums(albumsArray);\n                setSongs(songsArray);\n                console.log(songsArray)\n            };\n\n            //fetchAlbums();\n            fetchPlaylist();\n        }, [findPlaylist, id, findSong, findAlbum]\n    );\n\n\tuseEffect(() =>{\n\n        initFetch()\n\n\t\treturn () => {\n\n\t\t}\n\t}, [initFetch]);\n    const history = useHistory();\n\tconst handleEventReadMore = (albumId) => {\n\t\thistory.push(`${Routes.ALBUMS_DETAIL.replace(':id',albumId)}`);\n    };\n    \n    const handleReadMore = (ev, albumId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            handleEventReadMore(albumId);\n        }\n    };\n    \n    const filterTitle = (title) => {\n        const titlename = title.replace(/[0-9]/g, '');\n        const titlenameSplice = titlename.replace(/.mp|-|;|#|@|/, \"\");\n        const titlenameSpliced = titlenameSplice.replace('#', \"\");\n        const titleFiltered = titlenameSpliced.replace('('|'&;'|'#'|';'|')'|'.mp','');\n        const titleExtraFiltered = titleFiltered.replace(/[^\\w\\s]/gi, '');\n        const rmMp = titleExtraFiltered.replace('mp', '');\n        return rmMp;\n    };\n\n    return (\n        <Fragment>\n            {!!playlist\n            ?   <div className='playlist-detail'>\n                    <div>\n                        {playlist.acf.cover &&\n                            <img className='cover' src={playlist.acf.cover} alt={playlist.title.rendered} />\n                        }\n                        {!playlist.acf.cover &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='playlist-text'>\n                        <div>\n                            Title: {playlist.title.rendered}\n                        </div>\n                        <div>\n                            {playlist.acf.artist &&\n                                <p>Artist: {playlist.acf.artist}</p>\n                            }\n                        </div>\n                        <div>\n                            <p>Songs:</p>\n                            {!!songs ? \n                            songs.map((song, index) => (\n                                <div key={index}>\n                                    <p>{filterTitle(song.title.rendered)}</p>\n                                    <audio controls>\n                                        <source src={song.acf.audio}/>\n                                        <source type='audio/mpeg'/>\n                                        browser doesn't support audio.\n                                    </audio>\n                                </div>\n\n                            )):<div></div>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n                \n                :<div></div>}\n                            <div className=\"albums-container\">\n            {albums && albums.map((album, index) => (\n                <div className='album-container' key={index}>\n                    <div>\n                        {album.acf.cover &&\n                            <img className='cover' src={album.acf.cover} alt={album.title.rendered} />\n                        }\n                        {!album.acf.cover &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='album-text'>\n                        <div>\n                            Title: {album.title.rendered}\n                        </div>\n                        <div>\n                            {album.acf.artist &&\n                                <p>Artist: {album.acf.artist}</p>\n                            }\n                        </div>\n                        <button className='listen-to-album' onClick={ev => handleReadMore(ev, album.id)}>\n                            Listen to album\n                        </button>\n                        <div className='like-location-container'>\n                            {album.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            ))}\n        </div>\n        </Fragment>\n    );\n}\n\nexport default PlaylistDetail;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './albumList.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst UserAlbumList = ({children, amount, onReadMore, className, ...rest}) => {\n    const { findUserLibrary, storeUserLibrary, findAlbum } = useApi();\n    const [albums, setAlbums] = useState([]);\n    \n    const [userLib, setUserLib] = useState({\n        acf: {\n            albums:[]\n        }\n    });\n    \n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = authUser.user_id;\n\n    const initFetch = useCallback(\n            () => {\n\n            const fetchAlbumLibrary = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n\n                let albumAr = userLib.acf.albums;\n                let albumsArray=[];\n\n\n                if (albumAr) {\n                    for (const album of albumAr) {\n                        const albumData = await findAlbum(album);\n                        albumsArray.push(albumData);\n                    };\n                };\n\n                setAlbums(albumsArray);\n            };\n\n            fetchAlbumLibrary();\n\n        }, [findAlbum, findUserLibrary, userID, userLib.acf.albums],\n    );\n\n    const handleReadMore = (ev, albumId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            onReadMore(albumId);\n        };\n    };\n\n    useEffect(() => {\n\n        initFetch();\n        return () => {\n            \n        }\n    }, [initFetch])\n\n\n    const checkLikedAlbum = (album) => {\n        const likes = userLib.acf.albums;\n        if (likes) {\n            let liked = likes.includes(album.id);\n            return liked;\n        }\n    };\n\n    const unLikeAlbum = async (album) => {\n        // Index van unliked album ophalen en deze uit array splicen als deze niet -1 is.\n        const index = userLib.acf.albums.indexOf(album.id);\n        if (index !== -1) {\n            userLib.acf.albums.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    albums: userLib.acf.albums,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likeAlbum = async (album) => {\n        userLib.acf.albums.push(album.id);\n        const postObj = {\n            //title: userLib.title,\n            id: userLib.id,\n            fields: {\n                albums: userLib.acf.albums,\n            }\n        };\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    return(\n        <div className=\"albums-container\">\n            {albums && albums.map((album, index) => (\n                <div className='album-container' key={index}>\n                    <div>\n                        {album.acf.cover &&\n                            <img className='cover' src={album.acf.cover} alt={album.title.rendered} />\n                        }\n                        {!album.acf.cover &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='album-text'>\n                        <div>\n                            Title: {album.title.rendered}\n                        </div>\n                        <div>\n                            {album.acf.user_id.display_name &&\n                                <p>Artist: {album.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <button className='listen-to-album' onClick={ev => handleReadMore(ev, album.id)}>\n                            Listen to album\n                        </button>\n                        <div className='like-location-container'>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkLikedAlbum(album) &&\n                                        <button className='unlike' onClick={() => unLikeAlbum(album)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLikedAlbum(album) &&\n                                        <button onClick={() => likeAlbum(album)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n\n                                </div>\n                                :<div></div>\n                            }\n                            {album.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            ))}\n             {/*<button id='load' onClick={handleLoadMore} >Load More</button>*/}\n             {albums[0] === undefined && \n                <div>\n                    <h3>Nothing here listen some music and add to library.</h3>\n                </div>\n             }\n        </div>\n    );\n};\n\nexport default UserAlbumList;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './playlistList.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst UserPlaylistList = ({children, amount, onReadMore, className, ...rest}) => {\n    const { findAllPlaylists, findUserLibrary, storeUserLibrary, findPlaylist } = useApi();\n    const [playlists, setPlaylists] = useState([]);\n    const [playlistPage, setPlaylistPage] = useState(1);\n    const [userLib, setUserLib] = useState({\n        acf: {\n            playlists:[]\n        }\n    });\n    \n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = authUser.user_id;\n\n    const initFetch = useCallback(\n            () => {\n\n            const fetchPlaylistLibrary = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n\n                let albumAr = userLib.acf.playlists;\n                let playlistsArray=[];\n\n                if (albumAr) {\n                    for (const album of albumAr) {\n                        const albumData = await findPlaylist(album);\n                        playlistsArray.push(albumData);\n                    };\n                };\n                \n                setPlaylists(playlistsArray);\n            };\n\n            fetchPlaylistLibrary();\n\n        }, [findPlaylist, findUserLibrary, userID, userLib.acf.playlists],\n    );\n        console.log(playlists)\n    const handleReadMore = (ev, playlistId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            onReadMore(playlistId);\n        }\n    };\n\n    useEffect(() => {\n\n        initFetch();\n        return () => {\n            \n        }\n    }, [initFetch])\n\n\n    const handleLoadMore = async () => {\n        let number = playlistPage + 1;\n        setPlaylistPage(number);\n\n        const data = await findAllPlaylists(number);\n\n        if (data !== 'no more posts') {\n            let newPlaylists = playlists.concat(data);\n            setPlaylists(newPlaylists);\n        } else {\n            console.log('ran out of posts')\n        };\n\n    };\n\n    const checkLikedPlaylist = (playlist) => {\n        const likes = userLib.acf.playlists;\n        if (likes) {\n            let liked = likes.includes(playlist.id);\n            return liked;\n        }\n    };\n\n    const unLikePlaylist = async (playlist) => {\n        // Index van unliked playlist ophalen en deze uit array splicen als deze niet -1 is.\n        const index = userLib.acf.playlists.indexOf(playlist.id);\n        if (index !== -1) {\n            userLib.acf.playlists.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    playlists: userLib.acf.playlists,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likePlaylist = async (playlist) => {\n        userLib.acf.playlists.push(playlist.id);\n        const postObj = {\n            //title: userLib.title,\n            id: userLib.id,\n            fields: {\n                playlists: userLib.acf.playlists,\n            }\n        };\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    return(\n        <div className=\"playlists-container\">\n            \n            {playlists[0] !== undefined && playlists.map((playlist, index) => (\n                <div className='playlist-container' key={index}>\n                    <div className='playlist-text'>\n                        <div>\n                            Title: {playlist.title.rendered}\n                        </div>\n                        <div>\n                            {playlist.acf.artist &&\n                                <p>Artist: {playlist.acf.artist}</p>\n                            }\n                        </div>\n                        <button className='listen-to-playlist' onClick={ev => handleReadMore(ev, playlist.id)}>\n                            Listen to playlist\n                        </button>\n                        <div className='like-location-container'>\n                        {!!userLib ? \n                                <div>\n                                    {\n                                        checkLikedPlaylist(playlist) &&\n                                        <button id='unlike' onClick={() => unLikePlaylist(playlist)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLikedPlaylist(playlist) &&\n                                        <button onClick={() => likePlaylist(playlist)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n\n                                </div>\n                                :<div></div>\n                            }\n                            {playlist.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            ))}\n             {/*<button id='load' onClick={handleLoadMore} >Load More</button>*/}\n             {playlists[0] === undefined && \n                <div>\n                    <h3>Nothing here listen some music and add to library.</h3>\n                </div>\n             }\n        </div>\n    );\n};\n\nexport default UserPlaylistList;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './songs.scss';\nimport like from '../../static/icons/like_btn.svg';\n\nconst UserSongList = ({children, amount, onReadMore, className, ...rest}) => {\n    const { findAllSongs, findUserLibrary, storeUserLibrary, findSong } = useApi();\n    const [songs, setSongs] = useState([]);\n    const [songPage, setSongPage] = useState(1);\n    const [userLib, setUserLib] = useState({\n        acf: {\n            songs:[]\n        }\n    });\n    \n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    const token = authUser.token;\n    const userID = authUser.user_id;\n\n    const initFetch = useCallback(\n            () => {\n\n            const fetchSongLibrary = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n\n                let songAr = userLib.acf.songs;\n                let songsArray=[];\n                \n                if (songAr) {\n                    for (const song of songAr) {\n                        const songData = await findSong(song);\n                        songsArray.push(songData);\n                    };\n                };\n\n                setSongs(songsArray);\n            };\n\n            fetchSongLibrary();\n\n        }, [findSong, findUserLibrary, userID, userLib.acf.songs],\n    );\n\n    const handleReadMore = (ev, songId) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            onReadMore(songId);\n        }\n    };\n\n    useEffect(() => {\n\n        initFetch();\n        return () => {\n            \n        }\n    }, [initFetch])\n\n\n    const handleLoadMore = async () => {\n        let number = songPage + 1;\n        setSongPage(number);\n\n        const data = await findAllSongs(number);\n\n        if (data !== 'no more posts') {\n            let newSongs = songs.concat(data);\n            setSongs(newSongs);\n        } else {\n            console.log('ran out of posts')\n        };\n\n    };\n\n    const checkLikedSong = (song) => {\n        const likes = userLib.acf.songs;\n        if (likes) {\n            let liked = likes.includes(song.id);\n            return liked;\n        }\n    };\n\n    const unLikeSong = async (song) => {\n        // Index van unliked song ophalen en deze uit array splicen als deze niet -1 is.\n        const index = userLib.acf.songs.indexOf(song.id);\n        if (index !== -1) {\n            userLib.acf.songs.splice(index, 1);\n            const postObj = {\n                id: userLib.id,\n                fields:{\n                    songs: userLib.acf.songs,\n                }\n            };\n            const response = await storeUserLibrary (postObj ,token, userLib.id);\n            setUserLib(response);\n        };\n    };\n\n    const likeSong = async (song) => {\n        userLib.acf.songs.push(song.id);\n        const postObj = {\n            //title: userLib.title,\n            id: userLib.id,\n            fields: {\n                songs: userLib.acf.songs,\n            }\n        };\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    return(\n        <div className=\"songs-container\">\n            \n            {songs && songs.map((song, index) => (\n                <div className='song-container' key={index}>\n                    <div>\n                        {song.acf.picture &&\n                            <img className='cover' src={song.acf.picture} alt={song.title.rendered} />\n                        }\n                        {!song.acf.picture &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='song-text'>\n                        <div>\n                            Title: {song.title.rendered}\n                        </div>\n                        <div>\n                        {song.acf.user_id.display_name &&\n                                <p>Artist: {song.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <div>\n                            <audio controls>\n                                <source src={song.acf.audio.source_url}/>\n                                <source type='audio/mpeg'/>\n                                browser doesn't support audio.\n                            </audio>\n                        </div>\n                        <div className='like-location-container'>\n                            {!!userLib ? \n                                <div>\n                                    {\n                                        checkLikedSong(song) &&\n                                        <button className='unlike' onClick={() => unLikeSong(song)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLikedSong(song) &&\n                                        <button onClick={() => likeSong(song)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n                               \n                                </div>\n                                :<div></div>\n                            }\n                            {song.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                            \n                        </div>\n                        \n                    </div>  \n                   \n                </div>  \n                \n            ))}\n           \n           {/*<button id='load' onClick={handleLoadMore} >Load More</button>*/}\n           {songs[0] === undefined && \n                <div>\n                    <h3>Nothing here listen some music and add to library.</h3>\n                </div>\n             }\n        </div>\n    );\n};\n\nexport default UserSongList;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\n\nimport './followedUsers.scss';\n\nconst SongList = ({children, amount, onReadMore, className, ...rest}) => {\n\n    const { storeUserLibrary, findUserLibrary, findUser } = useApi();\n    const [userLib, setUserLib] = useState();\n    const [ artists, setArtists] = useState();\n    const authUser = JSON.parse(localStorage.getItem('authUser'));\n    let token;\n    let userID ;\n\n    if(authUser) {\n        token = authUser.token;\n        userID = authUser.user_id    \n    }\n    const initFetch = useCallback(\n        () => {\n            const fetchLib = async () => {\n                const body = await findUserLibrary(userID);\n                setUserLib(body[0]);\n                // setArtists(body[0].acf.artists);\n                let response = body[0].acf.artists;\n                console.log(response)\n                if(!isNaN(response)) {\n                    \n                    let artistArray = [];\n                    const res = await findUser(response);\n                    artistArray.push(res);\n                    setArtists(artistArray);\n\n                };\n                if (typeof response === 'string') {\n                    response = response.replace('[', '');\n                    response = response.replace(']', '');\n                    let artistId = [];\n                    artistId.push(parseInt(response));\n                    let artistArray = [];\n    \n                    for (const artist of artistId) {\n                        const res = await findUser(artist);\n                        console.log(res)\n                        artistArray.push(res);\n                    };\n                    setArtists(artistArray);\n                };\n                if (Array.isArray(response)) {\n                    let artistArray = [];\n                    for (const artist of response) {\n                        const res = await findUser(artist);\n                        console.log(res)\n                        artistArray.push(res);\n                    };\n                    setArtists(artistArray);\n                };\n            };\n            fetchLib();\n        }, [findUser, findUserLibrary, userID],\n    );\n\n    console.log(artists);\n\n\n    useEffect(() => {\n        initFetch();\n        \n        return () => {\n            // nothing to clean up\n        }\n    }, [initFetch],);\n    /*\n    const checkFollowed = (artist) => {\n        const artists = userLib.acf.artists;\n        console.log(artist);\n        if (Array.isArray(artists)) {\n            let followed = artists.includes(artist.id);\n            return followed;\n        } else if ( artists === artist.id) {\n            return true;\n        };\n    };  \n\n    const follow = async (artist) => {\n        let followed = [];\n        if (Array.isArray(userLib.acf.artists)) {\n            followed = userLib.acf.artists;\n            followed.push(parseInt(artist.id));\n        } else if (isNaN(userLib.acf.artists)) {\n            followed.push(parseInt(userLib.acf.artists));\n            followed.push(parseInt(artist.id));\n        } else {\n            followed.push(parseInt(artist.id)); \n        };\n\n        const postObj = {\n            id: userLib.id,\n            fields: {\n                artists: followed,\n            }\n        };\n\n        const response = await storeUserLibrary (postObj ,token, userLib.id);\n        setUserLib(response);\n    };\n\n    const unFollow = async (artist) => {\n        if (Array.isArray(userLib.acf.artists)) {\n            const index = userLib.acf.artists.indexOf(artist.id);\n            if (index !== -1) {\n                userLib.acf.artists.splice(index, 1)\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: userLib.acf.artists,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            };\n        };\n\n        if (!isNaN(userLib.acf.artists)) {\n\n            if (userLib.acf.artists === artist.id) {\n                const postObj = {\n                    id: userLib.id,\n                    fields:{\n                        artists: false,\n                    }\n                };\n                const response = await storeUserLibrary (postObj ,token, userLib.id);\n                setUserLib(response);\n            }\n        };\n    };\n    */\n\n    const handleReadMore = (ev, artist) => {\n        ev.preventDefault();\n        if (typeof onReadMore === 'function') {\n            onReadMore(artist.id);\n        };\n    };\n\n    return(\n        <div className=\"followed-container\">\n            <h3>Broadcasts from followed artists</h3>\n            {artists && artists.map((artist, index) => (\n                <div className='song-container' key={index}>\n                    <div className='song-text'>\n                        <div>\n                            Artist: {artist.name}\n                        </div>\n                        <button onClick={(ev) => handleReadMore(ev, artist)} className='follow' >Go to broadcast</button>\n                        <div className='like-location-container'>\n                           \n                        {!!userLib ? \n                                <div>\n                                    {/*\n                                        checkFollowed(artist) &&\n                                        <button className='follow' onClick={() => unFollow(artist)}>\n                                            unfollow artist\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkFollowed(artist) &&\n                                        <button className='follow' onClick={() => follow(artist)}>\n                                           follow artist\n                                        </button>\n                                    */}\n                                </div>\n                                :<div></div>\n                        }   \n                        </div>\n                        \n                    </div>  \n                   \n                </div>  \n                \n            ))}\n        </div>\n    );\n};\n\nexport default SongList;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\nimport {useParams} from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport * as Routes from '../../routes';\n\nimport './broadcastAlbumList.scss';\n\nconst ArtistAlbums = () => {\n\n    const { id } = useParams();\n    const { findUserLibrary, findAlbum } = useApi();\n    const [albums, setAlbums] = useState();\n    const [userLib, setUserLib] = useState();\n\n    let history = useHistory();\n\n    const initFetch = useCallback(\n        () => {\n            const fetchArtistAlbums = async (id) => {\n                const response = await findUserLibrary(id);\n                console.log(response);\n                setUserLib(response);\n                let albumIds = response[0].acf.artist_albums;\n                let albumData = [];\n                for ( const album of albumIds ) {\n                    const data = await findAlbum(album);\n                    albumData.push(data);\n                };\n                setAlbums(albumData);\n            };\n            fetchArtistAlbums(id);\n        }, [findAlbum, findUserLibrary, id]\n    );\n\n    useEffect(() => {\n        initFetch();\n        return () => {\n        }\n    }, [initFetch]);\n\n    const handleReadMore = (id) => {\n        history.push(`${Routes.ALBUMS_DETAIL.replace(':id',id)}`);\n    };\n\n    return (\n        <div className=\"broadcast-albums-container\">\n        {albums && \n        <h3>{albums[0].acf.user_id.display_name}'s albums broadcast</h3>\n        }\n        {albums && albums.map((album, index) => (\n            <div className='album-container' key={index}>\n                <div>\n                    {album.acf.cover &&\n                        <img className='cover' src={album.acf.cover} alt={album.title.rendered} />\n                    }\n                    {!album.acf.cover &&\n                        <div className='spacer'></div>\n                    }\n                </div>\n                <div className='album-text'>\n                    <div className='title'>\n                        Title: {album.title.rendered}\n                    </div>\n                    <div>\n                        {album.acf.artist &&\n                            <p>Artist: {album.acf.user_id.display_name}</p>\n                        }\n                    </div>\n                    <button className='listen-to-album' onClick={ev => handleReadMore(album.id)}>\n                        Listen to album\n                    </button>\n                    {/* !!userLib ? \n                            <div>\n                                {\n                                    checkFollowed(album) &&\n                                    <button className='follow' onClick={() => unFollow(album)}>\n                                        unfollow artist\n                                    </button>\n                                }\n                                {\n                                                                \n                                    !checkFollowed(album) &&\n                                    <button className='follow' onClick={() => follow(album)}>\n                                       follow artist\n                                    </button>\n                                }\n                            </div>\n                            :<div></div>\n                            */}\n                    <div className='like-location-container'>\n                        {/*!!userLib ? \n                            <div>\n                                {\n                                    checkLikedAlbum(album) &&\n                                    <button className='unlike' onClick={() => unLikeAlbum(album)}>\n                                        Unlike\n                                    </button>\n                                }\n                                {\n                                                                \n                                    !checkLikedAlbum(album) &&\n                                    <button onClick={() => likeAlbum(album)}>\n                                        <img alt='like' className='' src={like} />\n                                    </button>\n                                }\n                            </div>\n                            :<div></div>\n                            */}\n                        {album.acf.latitude &&\n                            <div>\n                                From:\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        ))}\n    </div>\n    )\n};\n\nexport default ArtistAlbums;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\nimport {useParams} from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport * as Routes from '../../routes';\n\nimport './artistPlaylistList.scss';\n\nconst ArtistPlaylists = () => {\n\n    const { id } = useParams();\n    const { findUserLibrary, findPlaylist } = useApi();\n    const [playlists, setPlaylists] = useState();\n    const [userLib, setUserLib] = useState();\n\n    let history = useHistory();\n\n    const initFetch = useCallback(\n        () => {\n            const fetchArtistPlaylists = async (id) => {\n                const response = await findUserLibrary(id);\n                console.log(response);\n                setUserLib(response);\n                let playlistIds = response[0].acf.artist_playlists;\n                let playlistData = [];\n                for ( const playlist of playlistIds ) {\n                    const data = await findPlaylist(playlist);\n                    playlistData.push(data);\n                };\n                setPlaylists(playlistData);\n            };\n            fetchArtistPlaylists(id);\n        }, [findPlaylist, findUserLibrary, id]\n    );\n\n    useEffect(() => {\n        initFetch();\n        return () => {\n        }\n    }, [initFetch]);\n\n    const handleReadMore = (id) => {\n        history.push(`${Routes.PLAYLISTS_DETAIL.replace(':id',id)}`);\n    };\n\n    return (\n<div className=\"artist-playlists-container\">\n            {playlists && playlists.map((playlist, index) => (\n                <div className='playlist-container' key={index}>\n                    <div className='playlist-text'>\n                        <div>\n                            Title: {playlist.title.rendered}\n                        </div>\n                        <div>\n                            {playlist.acf.description &&\n                                <p>Description: {playlist.acf.description}</p>\n                            }\n                        </div>\n                        <div>\n                            <button className='listen-to-playlist' onClick={(ev) => handleReadMore(playlist.id)} >\n                                Listen to playlist\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nexport default ArtistPlaylists;","import React, {useEffect, useState, useCallback} from 'react';\nimport { useApi } from '../../services';\nimport {useParams} from 'react-router-dom';\n\nimport './artistSongs.scss';\n\nconst ArtistsSongs = () => {\n\n    const { id } = useParams();\n    const { findUserLibrary, findSong } = useApi();\n    const [songs, setSongs] = useState();\n    const [userLib, setUserLib] = useState();\n\n\n    const initFetch = useCallback(\n        () => {\n            const fetchArtistSongs = async (id) => {\n                const response = await findUserLibrary(id);\n                console.log(response);\n                setUserLib(response);\n                let songIds = response[0].acf.artist_songs;\n                let songData = [];\n                console.log(songIds)\n                for ( const song of songIds ) {\n                    const data = await findSong(song);\n                    console.log(data)\n                    songData.push(data);\n                };\n                setSongs(songData);\n            };\n            fetchArtistSongs(id);\n        }, [findSong, findUserLibrary, id]\n    );\n\n    useEffect(() => {\n        initFetch();\n        return () => {\n        }\n    }, [initFetch]);\n\n    return (\n        <div className=\"artist-songs-container\">\n            {songs && \n            <h3>{songs[0].acf.user_id.display_name}'s songs broadcast</h3>\n            }\n            {songs && songs.map((song, index) => (\n                <div className='song-container' key={index}>\n                    <div>\n                        {song.acf.picture &&\n                            <img className='cover' src={song.acf.picture} alt={song.title.rendered} />\n                        }\n                        {!song.acf.picture &&\n                            <div className='spacer'></div>\n                        }\n                    </div>\n                    <div className='song-text'>\n                        <div>\n                            Title: {song.title.rendered}\n                        </div>\n                        <div>\n                            {song.acf.user_id.display_name &&\n                                <p>Artist: {song.acf.user_id.display_name}</p>\n                            }\n                        </div>\n                        <div>\n                            <audio controls>\n                                <source src={song.acf.audio}/>\n                                <source type='audio/mpeg'/>\n                                browser doesn't support audio.\n                            </audio>\n                        </div>\n\n                        <div className='like-location-container'>\n                        {/*!!userLib ? \n                                <div>\n                                    {\n                                        checkFollowed(song) &&\n                                        <button className='follow' onClick={() => unFollow(song)}>\n                                            unfollow artist\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkFollowed(song) &&\n                                        <button className='follow' onClick={() => follow(song)}>\n                                           follow artist\n                                        </button>\n                                    }\n                                </div>\n                                :<div></div>\n                        }\n                            {/*!!userLib ? \n                                <div>\n                                    {\n                                        checkLiked(song) &&\n                                        <button className='unlike' onClick={() => unLikeSong(song)}>\n                                            Unlike\n                                        </button>\n                                    }\n                                    {\n                                                                    \n                                        !checkLiked(song) &&\n                                        <button onClick={() => likeSong(song)}>\n                                            <img alt='like' className='' src={like} />\n                                        </button>\n                                    }\n                               \n                                </div>\n                                :<div></div>\n                                */}\n                            {song.acf.latitude &&\n                                <div>\n                                    From:\n                                </div>\n                            }\n                            \n                        </div>\n                        \n                    </div>  \n                   \n                </div>  \n                \n            ))}\n        </div>\n    )\n};\n\nexport default ArtistsSongs;","import React from 'react';\nimport './homePage.scss';\n\n// component imports\nimport {\n    Header,\n    Footer,\n    HeaderImage,\n    LocationSearchbar,\n\n} from '../components';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <Header/>\n            <HeaderImage/>\n            <LocationSearchbar/>\n            \n            <Footer/>\n        </div>\n    );\n};\n\nexport default HomePage;","import React from 'react';\nimport './searchSongsPage.scss';\n\n// component imports\nimport {\n    Header,\n    Footer,\n    SongList,\n    MusicSearchbar,\n} from '../components';\n\nconst SearchSongsPage = () => {\n    return (\n        <div>\n            <Header/>\n            <MusicSearchbar/>\n            <SongList/>\n            <Footer/>\n        </div>\n    );\n};\n\nexport default SearchSongsPage;","import react from 'react';\nimport './contactPage.scss';\nimport { Header, Footer } from '../components';\n\nconst ContactPage = () => {\n    return(\n        <div className='contact-page-container'>\n            <Header/>\n                <div className='contact-text'>\n                    <h3>\n                        Contact:\n                    </h3>\n                    <p>e-mail: arneverl@student.arteveldehs.be</p>\n                    <p>GSM: 04999999</p>\n                    <p>Telefoon: 02345434</p>\n                </div>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default ContactPage;","import React from 'react';\n\nimport {Login, Header, Footer} from '../components';\n\nconst LoginPage = () => {\n\n    return (\n        <div>\n            <Header/>\n            <Login/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default LoginPage;","import React from 'react';\n\nimport {Register, Header, Footer} from '../components';\n\nconst RegisterPage = () => {\n\n    return (\n        <div>\n            <Header/>\n            <Register/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default RegisterPage;","export default __webpack_public_path__ + \"static/media/upload_white.74f74e45.svg\";","export default __webpack_public_path__ + \"static/media/plus_white.9ef2dfad.svg\";","import React from 'react';\nimport * as Routes from '../../routes';\nimport {Link, useHistory} from 'react-router-dom';\nimport './artistPage.scss';\nimport { Header, Footer, HeaderImage } from '../../components';\n\n\nimport upload from '../../static/icons/upload_white.svg';\nimport plus from '../../static/icons/plus_white.svg';\n\nconst ArtistPage = () => {\n\n    let user = JSON.parse(localStorage.getItem('authUser'));\n    let history = useHistory();\n    if (!user) {\n        history.push(Routes.HOME)\n    }\n\n    return (\n        <div className='artist-page-container'>\n            <Header/>\n            <HeaderImage/>\n                    \n            <div className='artist-page-content'>\n                <Link to={Routes.UPLOAD_SONG}>\n                    <img src={upload} alt='Upload song'/>\n                    <p>Upload song</p>\n                </Link>\n                <Link to={Routes.UPLOAD_ALBUM}>\n                    <img src={upload} alt='Upload album'/>\n                    <p>Upload Album</p>\n                </Link>\n                <Link to={Routes.MAKE_PLAYLIST}>\n                    <img src={plus} alt='Upload playlist'/>\n                    <p>Make Playlist</p>\n                </Link>\n            </div>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default ArtistPage;","import React from 'react';\nimport { Header, Footer, UploadSong } from '../../components';\nimport './uploadSongPage.scss';\nimport * as Routes from '../../routes';\nimport { useHistory} from 'react-router-dom';\n\nconst UploadSongPage = () => {\n    let user = JSON.parse(localStorage.getItem('authUser'));\n    let history = useHistory();\n    if (!user) {\n        history.push(Routes.HOME)\n    }\n    return (\n        <div className='UploadSongPage-container'>\n            <Header/>\n\n            <UploadSong/>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default UploadSongPage;","import React from 'react';\nimport { Header, Footer, /*AlbumUpload,*/ AlbumUploadWithRel } from '../../components';\nimport * as Routes from '../../routes';\nimport { useHistory} from 'react-router-dom';\n// import './uploadSongPage.scss';\n\nconst UploadAlbumPage = () => {\n    let user = JSON.parse(localStorage.getItem('authUser'));\n    let history = useHistory();\n    if (!user) {\n        history.push(Routes.HOME)\n    }\n    return (\n        <div className='UploadAlbumPage-container'>\n            <Header/>\n\n            <AlbumUploadWithRel/>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default UploadAlbumPage;","import React from 'react';\nimport { Header, Footer, MakePlaylist } from '../../components';\nimport * as Routes from '../../routes';\nimport { useHistory} from 'react-router-dom';\n// import './uploadSongPage.scss';\n\nconst MakePlaylistPage = () => {\n    let user = JSON.parse(localStorage.getItem('authUser'));\n    let history = useHistory();\n    if (!user) {\n        history.push(Routes.HOME)\n    }\n    return (\n        <div className='MakePlaylistPage-container'>\n            <Header/>\n\n            <MakePlaylist/>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default MakePlaylistPage;","import React from 'react';\nimport { Header, Footer, AlbumList, MusicSearchbar } from '../../components';\nimport {useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\n\nconst AlbumsPage = ({children}) => {\n\n    const history = useHistory();\n\tconst handleEventReadMore = (albumId) => {\n\t\thistory.push(`${Routes.ALBUMS_DETAIL.replace(':id',albumId)}`);\n\t};\n\n    return (\n        <div>\n            <Header/>\n            <MusicSearchbar/>\n            <AlbumList onReadMore={handleEventReadMore}/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default AlbumsPage;","import { default as React, useEffect, useState, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useApi } from '../../services';\n\nimport { AlbumDetail, Footer, Header, HeaderImage, MusicSearchbar } from '../../components';\n\nconst AlbumDetailPage = ({children}) => {\n\n\treturn (\n\t\t<Fragment>\n            <Header/>\n            <HeaderImage/>\n            <MusicSearchbar/>\n\t\t\t<AlbumDetail/>\n            <Footer/>\n\t\t</Fragment>\n\t);\n};\n\nexport default AlbumDetailPage;","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\nimport { Header, Footer, PlaylistList, MusicSearchbar } from '../../components';\n\nconst PlaylistsPage = ({children}) => {\n\n    const history = useHistory();\n\tconst handleEventReadMore = (playlistId) => {\n\t\thistory.push(`${Routes.PLAYLISTS_DETAIL.replace(':id',playlistId)}`);\n    };\n    \n    return (\n        <div>\n            <Header/>\n            <MusicSearchbar/>\n            <PlaylistList onReadMore={handleEventReadMore} />\n            <Footer/>\n        </div>\n    );\n}\n\nexport default PlaylistsPage;","import React from 'react';\n\nimport { Header, Footer, PlaylistDetail, MusicSearchbar } from '../../components';\nimport {useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\n\nconst PlaylistsPage = ({children}) => {\n\n    const history = useHistory();\n\tconst handleEventReadMore = (albumId) => {\n\t\thistory.push(`${Routes.ALBUMS_DETAIL.replace(':id', albumId)}`);\n    };\n\n    return (\n        <div>\n            <Header/>\n            <MusicSearchbar/>\n            <PlaylistDetail onReadMore={handleEventReadMore} />\n            <Footer/>\n        </div>\n    );\n}\n\nexport default PlaylistsPage;","import React, { Fragment } from 'react';\nimport {UserAlbumList, Header, Footer} from '../../components';\nimport { LibrarySearchbar } from '../../components';\nimport { useHistory } from 'react-router';\nimport * as Routes from '../../routes';\n\n\nconst UserAlbumPage = () => {\n    \n    const history = useHistory();\n    const handleEventReadMore = (albumId) => {\n    history.push(`${Routes.ALBUMS_DETAIL.replace(':id',albumId)}`);\n};\n\n    return (\n        <Fragment>\n            <Header/>\n            <LibrarySearchbar/>\n            <UserAlbumList onReadMore={handleEventReadMore} />\n            <Footer/>\n        </Fragment>\n    )\n}\n\nexport default UserAlbumPage;","import React, { Fragment } from 'react';\nimport {UserPlaylistList, Header, Footer} from '../../components';\nimport { LibrarySearchbar } from '../../components';\nimport {useHistory} from 'react-router-dom';\nimport * as Routes from '../../routes';\n\nconst UserPlaylistPage = () => {\n\n    const history = useHistory();\n\tconst handleEventReadMore = (playlistId) => {\n\t\thistory.push(`${Routes.PLAYLISTS_DETAIL.replace(':id',playlistId)}`);\n\t};\n    \n    return (\n        <Fragment>\n            <Header/>\n            <LibrarySearchbar/>\n            <UserPlaylistList onReadMore={handleEventReadMore} />\n            <Footer/>\n        </Fragment>\n    )\n}\n\nexport default UserPlaylistPage;","import React, { Fragment } from 'react';\nimport {UserSongList, Header, Footer} from '../../components';\nimport { LibrarySearchbar } from '../../components';\n\nconst UserSongPage = () => {\n    \n    return (\n        <Fragment>\n            <Header/>\n            <LibrarySearchbar/>\n            <UserSongList/>\n            <Footer/>\n        </Fragment>\n    )\n}\n\nexport default UserSongPage;","import React, { Fragment } from 'react';\nimport { FollowedUsers, Header, Footer } from '../../components';\nimport * as Routes from '../../routes';\nimport { useHistory } from 'react-router';\n\nconst FollowedPage = ({children}) => {\n\n    const history = useHistory();\n\tconst handleEventReadMore = (userId) => {\n\t\thistory.push(`${Routes.BROADCAST_ALBUMS.replace(':id', userId)}`);\n\t};\n\n    return (\n        <Fragment>\n            <Header/>\n            <FollowedUsers  onReadMore={handleEventReadMore}/>\n            <Footer/>\n        </Fragment>\n\n    );\n};\n\nexport default FollowedPage;","import React, { Fragment } from 'react';\nimport { ArtistAlbums, Footer, Header, RadioSearchBar } from '../../components';\n\nconst ArtistAlbumPage = () => {\n    return (\n        <Fragment>\n            <Header/>\n            <RadioSearchBar/>\n            <ArtistAlbums/>\n            <Footer/>\n        </Fragment>\n    );\n};\n\nexport default ArtistAlbumPage;","import React, { Fragment } from 'react';\nimport { ArtistPlaylists, Footer, Header, RadioSearchBar } from '../../components';\n\nconst ArtistPlaylistPage = () => {\n    return (\n        <Fragment>\n            <Header/>\n            <RadioSearchBar/>\n            <ArtistPlaylists/>\n            <Footer/>\n        </Fragment>\n    );\n};\n\nexport default ArtistPlaylistPage;","import React, { Fragment } from 'react';\nimport { ArtistsSongs, Footer, Header, RadioSearchBar } from '../../components';\n\nconst ArtistSongPage = () => {\n    return (\n        <Fragment>\n            <Header/>\n            <RadioSearchBar/>\n            <ArtistsSongs/>\n            <Footer/>\n        </Fragment>\n    );\n};\n\nexport default ArtistSongPage;","import React from 'react';\n\nconst PageLayout = ({children}) => {\n    return (\n        <div className='page'>\n            <main>\n                {children}\n            </main>\n        </div>\n    );\n};\n\nexport default PageLayout;","import React from 'react';\nimport { Route as ReactRoute } from 'react-router';\n\nconst renderMergedProps = (component, layout, routeProps) => {\n    return (layout) ? React.createElement(layout, routeProps, React.createElement(component, routeProps)) : React.createElement(component, routeProps);\n};\n\nconst RouteLayout = ({component, layout, ...rest}) => {\n    return (\n        <ReactRoute {...rest} render={routeProps => {\n            return renderMergedProps(component, layout, routeProps);\n        }} />\n    );\n};\n\nexport default RouteLayout;","import React from 'react';\nimport 'bootstrap';\n// Router import\nimport {BrowserRouter as HashRouter, Switch, Redirect} from 'react-router-dom';\n// scss import\nimport './app.scss';\n// Routes + services\nimport * as Routes from './routes';\n// imports rom pages\nimport {\n    HomePage,\n    SearchSongsPage,\n    ContactPage,\n    LoginPage,\n    ArtistPage,\n    UploadSongPage,\n    AlbumsPage,\n    PlaylistsPage,\n    UploadAlbumPage,\n    AlbumDetailPage,\n    RegisterPage,\n    MakePlaylistPage,\n    PlaylistDetailPage,\n    UserAlbumPage,\n    UserSongPage,\n    UserPlaylistPage,\n    FollowedPage,\n    ArtistSongPage,\n    ArtistAlbumPage,\n    ArtistPlaylistPage\n} \nfrom './pages';\n// utilities\nimport { PageLayout } from './layout';\nimport { RouteLayout } from './utilities';\n// services\nimport {ApiProvider} from './services';\nimport {AuthProvider} from './services'\nimport { ArtistsSongs } from './components';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AuthProvider>\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <ApiProvider>\n                    <Switch>\n                        <RouteLayout exact path={Routes.HOME} component={HomePage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.SONGS} component={SearchSongsPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.ALBUMS} component={AlbumsPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.ALBUMS_DETAIL} component={AlbumDetailPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.PLAYLISTS} component={PlaylistsPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.PLAYLISTS_DETAIL} component={PlaylistDetailPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.CONTACT} component={ContactPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.ARTISTS} component={ArtistPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.UPLOAD_SONG} component={UploadSongPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.UPLOAD_ALBUM} component={UploadAlbumPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.MAKE_PLAYLIST} component={MakePlaylistPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.USER_ALBUM} component={UserAlbumPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.USER_PLAYLISTS} component={UserPlaylistPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.USER_SONGS} component={UserSongPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.BROADCAST_FOLLOWED_USERS} component={FollowedPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.BROADCAST_SONGS} component={ArtistSongPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.BROADCAST_ALBUMS} component={ArtistAlbumPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.BROADCAST_PLAYLISTS} component={ArtistPlaylistPage} layout={PageLayout} />\n\n                        <RouteLayout exact path={Routes.LOGIN} component={LoginPage} layout={PageLayout} />\n                        <RouteLayout exact path={Routes.REGISTER} component={RegisterPage} layout={PageLayout} />\n                    </Switch>\n                </ApiProvider>\n            </HashRouter>\n        </AuthProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}